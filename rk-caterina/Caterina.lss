
Caterina.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00007e7a  00000f0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e7a  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  008001a0  008001a0  00000fae  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00001000  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005579  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b03  00000000  00000000  00006841  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000329a  00000000  00000000  00008344  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a8  00000000  00000000  0000b5e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020a0  00000000  00000000  0000bd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000031fb  00000000  00000000  0000de28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  00011023  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	55 c0       	rjmp	.+170    	; 0x70ac <__ctors_end>
    7002:	00 00       	nop
    7004:	6e c0       	rjmp	.+220    	; 0x70e2 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	6c c0       	rjmp	.+216    	; 0x70e2 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	6a c0       	rjmp	.+212    	; 0x70e2 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	68 c0       	rjmp	.+208    	; 0x70e2 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	66 c0       	rjmp	.+204    	; 0x70e2 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	64 c0       	rjmp	.+200    	; 0x70e2 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	62 c0       	rjmp	.+196    	; 0x70e2 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	60 c0       	rjmp	.+192    	; 0x70e2 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	5e c0       	rjmp	.+188    	; 0x70e2 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	ba c4       	rjmp	.+2420   	; 0x799e <__vector_10>
    702a:	00 00       	nop
    702c:	5a c0       	rjmp	.+180    	; 0x70e2 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	58 c0       	rjmp	.+176    	; 0x70e2 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	56 c0       	rjmp	.+172    	; 0x70e2 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	54 c0       	rjmp	.+168    	; 0x70e2 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	52 c0       	rjmp	.+164    	; 0x70e2 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	50 c0       	rjmp	.+160    	; 0x70e2 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	dd c0       	rjmp	.+442    	; 0x7200 <__vector_17>
    7046:	00 00       	nop
    7048:	4c c0       	rjmp	.+152    	; 0x70e2 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	4a c0       	rjmp	.+148    	; 0x70e2 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	48 c0       	rjmp	.+144    	; 0x70e2 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	46 c0       	rjmp	.+140    	; 0x70e2 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	44 c0       	rjmp	.+136    	; 0x70e2 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	42 c0       	rjmp	.+132    	; 0x70e2 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	40 c0       	rjmp	.+128    	; 0x70e2 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	3e c0       	rjmp	.+124    	; 0x70e2 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	3c c0       	rjmp	.+120    	; 0x70e2 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	3a c0       	rjmp	.+116    	; 0x70e2 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	38 c0       	rjmp	.+112    	; 0x70e2 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	36 c0       	rjmp	.+108    	; 0x70e2 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	34 c0       	rjmp	.+104    	; 0x70e2 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	32 c0       	rjmp	.+100    	; 0x70e2 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	30 c0       	rjmp	.+96     	; 0x70e2 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	2e c0       	rjmp	.+92     	; 0x70e2 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	2c c0       	rjmp	.+88     	; 0x70e2 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	2a c0       	rjmp	.+84     	; 0x70e2 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	28 c0       	rjmp	.+80     	; 0x70e2 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	26 c0       	rjmp	.+76     	; 0x70e2 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	24 c0       	rjmp	.+72     	; 0x70e2 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	22 c0       	rjmp	.+68     	; 0x70e2 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	20 c0       	rjmp	.+64     	; 0x70e2 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	1e c0       	rjmp	.+60     	; 0x70e2 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	1c c0       	rjmp	.+56     	; 0x70e2 <__bad_interrupt>
    70aa:	00 00       	nop

000070ac <__ctors_end>:
    70ac:	11 24       	eor	r1, r1
    70ae:	1f be       	out	0x3f, r1	; 63
    70b0:	cf ef       	ldi	r28, 0xFF	; 255
    70b2:	da e0       	ldi	r29, 0x0A	; 10
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	cd bf       	out	0x3d, r28	; 61

000070b8 <__do_copy_data>:
    70b8:	11 e0       	ldi	r17, 0x01	; 1
    70ba:	a0 e0       	ldi	r26, 0x00	; 0
    70bc:	b1 e0       	ldi	r27, 0x01	; 1
    70be:	ea e7       	ldi	r30, 0x7A	; 122
    70c0:	fe e7       	ldi	r31, 0x7E	; 126
    70c2:	02 c0       	rjmp	.+4      	; 0x70c8 <__do_copy_data+0x10>
    70c4:	05 90       	lpm	r0, Z+
    70c6:	0d 92       	st	X+, r0
    70c8:	a0 3a       	cpi	r26, 0xA0	; 160
    70ca:	b1 07       	cpc	r27, r17
    70cc:	d9 f7       	brne	.-10     	; 0x70c4 <__do_copy_data+0xc>

000070ce <__do_clear_bss>:
    70ce:	21 e0       	ldi	r18, 0x01	; 1
    70d0:	a0 ea       	ldi	r26, 0xA0	; 160
    70d2:	b1 e0       	ldi	r27, 0x01	; 1
    70d4:	01 c0       	rjmp	.+2      	; 0x70d8 <.do_clear_bss_start>

000070d6 <.do_clear_bss_loop>:
    70d6:	1d 92       	st	X+, r1

000070d8 <.do_clear_bss_start>:
    70d8:	a6 3b       	cpi	r26, 0xB6	; 182
    70da:	b2 07       	cpc	r27, r18
    70dc:	e1 f7       	brne	.-8      	; 0x70d6 <.do_clear_bss_loop>
    70de:	59 d3       	rcall	.+1714   	; 0x7792 <main>
    70e0:	ca c6       	rjmp	.+3476   	; 0x7e76 <_exit>

000070e2 <__bad_interrupt>:
    70e2:	8e cf       	rjmp	.-228    	; 0x7000 <__vectors>

000070e4 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    70e4:	84 e0       	ldi	r24, 0x04	; 4
    70e6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    70ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
    70ee:	85 ff       	sbrs	r24, 5
    70f0:	03 c0       	rjmp	.+6      	; 0x70f8 <FetchNextCommandByte+0x14>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    70f2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			  return 0;
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
    70f6:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    70f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    70fc:	8b 77       	andi	r24, 0x7B	; 123
    70fe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7102:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
    7106:	82 fd       	sbrc	r24, 2
    7108:	f0 cf       	rjmp	.-32     	; 0x70ea <FetchNextCommandByte+0x6>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    710a:	8e b3       	in	r24, 0x1e	; 30
    710c:	81 11       	cpse	r24, r1
    710e:	f9 cf       	rjmp	.-14     	; 0x7102 <FetchNextCommandByte+0x1e>
			  return 0;
    7110:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
    7112:	08 95       	ret

00007114 <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7114:	93 e0       	ldi	r25, 0x03	; 3
    7116:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    711a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPNUM);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    711e:	95 ff       	sbrs	r25, 5
    7120:	0a c0       	rjmp	.+20     	; 0x7136 <WriteNextResponseByte+0x22>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7122:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	}

	/* Write the next byte to the IN endpoint */
	Endpoint_Write_8(Response);
	
	TX_LED_ON();
    7126:	5d 98       	cbi	0x0b, 5	; 11
	TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    7128:	84 e6       	ldi	r24, 0x64	; 100
    712a:	90 e0       	ldi	r25, 0x00	; 0
    712c:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <TxLEDPulse+0x1>
    7130:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <TxLEDPulse>
    7134:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7136:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    713a:	9e 77       	andi	r25, 0x7E	; 126
    713c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7140:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
    7144:	90 fd       	sbrc	r25, 0
    7146:	ed cf       	rjmp	.-38     	; 0x7122 <WriteNextResponseByte+0xe>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7148:	9e b3       	in	r25, 0x1e	; 30
    714a:	91 11       	cpse	r25, r1
    714c:	f9 cf       	rjmp	.-14     	; 0x7140 <WriteNextResponseByte+0x2c>
	/* Write the next byte to the IN endpoint */
	Endpoint_Write_8(Response);
	
	TX_LED_ON();
	TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
}
    714e:	08 95       	ret

00007150 <StartSketch>:
uint16_t bootKey = 0x7777;
volatile uint16_t *const bootKeyPtr = (volatile uint16_t *)0x0800;

void StartSketch(void)
{
	cli();
    7150:	f8 94       	cli
	
	/* Undo TIMER1 setup and clear the count before running the sketch */
	TIMSK1 = 0;
    7152:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TCCR1B = 0;
    7156:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
    715a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
	TCNT1L = 0;
    715e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	
	/* Relocate the interrupt vector table to the application section */
	MCUCR = (1 << IVCE);
    7162:	81 e0       	ldi	r24, 0x01	; 1
    7164:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0;
    7166:	15 be       	out	0x35, r1	; 53

	L_LED_OFF();
    7168:	47 98       	cbi	0x08, 7	; 8
	TX_LED_OFF();
    716a:	5d 9a       	sbi	0x0b, 5	; 11
	RX_LED_OFF();
    716c:	28 9a       	sbi	0x05, 0	; 5

	/* jump to beginning of application space */
	__asm__ volatile("jmp 0x0000");
    716e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
}
    7172:	08 95       	ret

00007174 <LEDPulse>:

/*	Breathing animation on L LED indicates bootloader is running */
uint16_t LLEDPulse;
void LEDPulse(void)
{
	LLEDPulse++;
    7174:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <LLEDPulse>
    7178:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <LLEDPulse+0x1>
    717c:	2f 5f       	subi	r18, 0xFF	; 255
    717e:	3f 4f       	sbci	r19, 0xFF	; 255
    7180:	30 93 ab 01 	sts	0x01AB, r19	; 0x8001ab <LLEDPulse+0x1>
    7184:	20 93 aa 01 	sts	0x01AA, r18	; 0x8001aa <LLEDPulse>
	uint8_t p = LLEDPulse >> 8;
    7188:	83 2f       	mov	r24, r19
	if (p > 127)
    718a:	37 ff       	sbrs	r19, 7
    718c:	02 c0       	rjmp	.+4      	; 0x7192 <LEDPulse+0x1e>
		p = 254-p;
    718e:	8e ef       	ldi	r24, 0xFE	; 254
    7190:	83 1b       	sub	r24, r19
	p += p;
    7192:	88 0f       	add	r24, r24
	if (((uint8_t)LLEDPulse) > p)
    7194:	82 17       	cp	r24, r18
    7196:	10 f4       	brcc	.+4      	; 0x719c <LEDPulse+0x28>
		L_LED_OFF();
    7198:	47 98       	cbi	0x08, 7	; 8
    719a:	08 95       	ret
	else
		L_LED_ON();
    719c:	47 9a       	sbi	0x08, 7	; 8
}
    719e:	08 95       	ret

000071a0 <SetupHardware>:

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    71a0:	84 b7       	in	r24, 0x34	; 52
    71a2:	87 7f       	andi	r24, 0xF7	; 247
    71a4:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    71a6:	0f b6       	in	r0, 0x3f	; 63
    71a8:	f8 94       	cli
    71aa:	a8 95       	wdr
    71ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    71b0:	88 61       	ori	r24, 0x18	; 24
    71b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    71b6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    71ba:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    71bc:	90 e8       	ldi	r25, 0x80	; 128
    71be:	80 e0       	ldi	r24, 0x00	; 0
    71c0:	0f b6       	in	r0, 0x3f	; 63
    71c2:	f8 94       	cli
    71c4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    71c8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    71cc:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    71ce:	81 e0       	ldi	r24, 0x01	; 1
    71d0:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
    71d2:	82 e0       	ldi	r24, 0x02	; 2
    71d4:	85 bf       	out	0x35, r24	; 53
	
	LED_SETUP();
    71d6:	3f 9a       	sbi	0x07, 7	; 7
    71d8:	20 9a       	sbi	0x04, 0	; 4
    71da:	55 9a       	sbi	0x0a, 5	; 10
	CPU_PRESCALE(0); 
    71dc:	e1 e6       	ldi	r30, 0x61	; 97
    71de:	f0 e0       	ldi	r31, 0x00	; 0
    71e0:	90 83       	st	Z, r25
    71e2:	10 82       	st	Z, r1
	L_LED_OFF();
    71e4:	47 98       	cbi	0x08, 7	; 8
	TX_LED_OFF();
    71e6:	5d 9a       	sbi	0x0b, 5	; 11
	RX_LED_OFF();
    71e8:	28 9a       	sbi	0x05, 0	; 5
	 * With 16 MHz clock and 1/64 prescaler, timer 1 is clocked at 250 kHz
	 * Our chosen compare match generates an interrupt every 1 ms.
	 * This interrupt is disabled selectively when doing memory reading, erasing,
	 * or writing since SPM has tight timing requirements.
	 */ 
	OCR1AH = 0;
    71ea:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
	OCR1AL = 250;
    71ee:	9a ef       	ldi	r25, 0xFA	; 250
    71f0:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
    71f4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
    71f8:	83 e0       	ldi	r24, 0x03	; 3
    71fa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

	/* Initialize USB Subsystem */
	USB_Init();
    71fe:	b7 c3       	rjmp	.+1902   	; 0x796e <USB_Init>

00007200 <__vector_17>:
}

//uint16_t ctr = 0;
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
    7200:	1f 92       	push	r1
    7202:	0f 92       	push	r0
    7204:	0f b6       	in	r0, 0x3f	; 63
    7206:	0f 92       	push	r0
    7208:	11 24       	eor	r1, r1
    720a:	2f 93       	push	r18
    720c:	8f 93       	push	r24
    720e:	9f 93       	push	r25
    7210:	ef 93       	push	r30
    7212:	ff 93       	push	r31
	/* Reset counter */
	TCNT1H = 0;
    7214:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
	TCNT1L = 0;
    7218:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>

	/* Check whether the TX or RX LED one-shot period has elapsed.  if so, turn off the LED */
	if (TxLEDPulse && !(--TxLEDPulse))
    721c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <TxLEDPulse>
    7220:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <TxLEDPulse+0x1>
    7224:	00 97       	sbiw	r24, 0x00	; 0
    7226:	41 f0       	breq	.+16     	; 0x7238 <__vector_17+0x38>
    7228:	01 97       	sbiw	r24, 0x01	; 1
    722a:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <TxLEDPulse+0x1>
    722e:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <TxLEDPulse>
    7232:	89 2b       	or	r24, r25
    7234:	09 f4       	brne	.+2      	; 0x7238 <__vector_17+0x38>
		TX_LED_OFF();
    7236:	5d 9a       	sbi	0x0b, 5	; 11
	if (RxLEDPulse && !(--RxLEDPulse))
    7238:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <RxLEDPulse>
    723c:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <RxLEDPulse+0x1>
    7240:	00 97       	sbiw	r24, 0x00	; 0
    7242:	41 f0       	breq	.+16     	; 0x7254 <__vector_17+0x54>
    7244:	01 97       	sbiw	r24, 0x01	; 1
    7246:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <RxLEDPulse+0x1>
    724a:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <RxLEDPulse>
    724e:	89 2b       	or	r24, r25
    7250:	09 f4       	brne	.+2      	; 0x7254 <__vector_17+0x54>
		RX_LED_OFF();
    7252:	28 9a       	sbi	0x05, 0	; 5
	
	if (pgm_read_word(0) != 0xFFFF)
    7254:	f0 e0       	ldi	r31, 0x00	; 0
    7256:	e0 e0       	ldi	r30, 0x00	; 0
    7258:	85 91       	lpm	r24, Z+
    725a:	94 91       	lpm	r25, Z
    725c:	01 96       	adiw	r24, 0x01	; 1
    725e:	49 f0       	breq	.+18     	; 0x7272 <__vector_17+0x72>
		Timeout++;
    7260:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
    7264:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x1>
    7268:	01 96       	adiw	r24, 0x01	; 1
    726a:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <__data_end+0x1>
    726e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__data_end>
}
    7272:	ff 91       	pop	r31
    7274:	ef 91       	pop	r30
    7276:	9f 91       	pop	r25
    7278:	8f 91       	pop	r24
    727a:	2f 91       	pop	r18
    727c:	0f 90       	pop	r0
    727e:	0f be       	out	0x3f, r0	; 63
    7280:	0f 90       	pop	r0
    7282:	1f 90       	pop	r1
    7284:	18 95       	reti

00007286 <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7286:	42 e0       	ldi	r20, 0x02	; 2
    7288:	61 ec       	ldi	r22, 0xC1	; 193
    728a:	82 e0       	ldi	r24, 0x02	; 2
    728c:	05 d3       	rcall	.+1546   	; 0x7898 <Endpoint_ConfigureEndpoint_Prv>
    728e:	42 e1       	ldi	r20, 0x12	; 18
    7290:	61 e8       	ldi	r22, 0x81	; 129
    7292:	83 e0       	ldi	r24, 0x03	; 3
    7294:	01 d3       	rcall	.+1538   	; 0x7898 <Endpoint_ConfigureEndpoint_Prv>
    7296:	42 e1       	ldi	r20, 0x12	; 18
    7298:	60 e8       	ldi	r22, 0x80	; 128
    729a:	84 e0       	ldi	r24, 0x04	; 4
    729c:	fd c2       	rjmp	.+1530   	; 0x7898 <Endpoint_ConfigureEndpoint_Prv>

0000729e <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Ignore any requests that aren't directed to the CDC interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    729e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <USB_ControlRequest>
    72a2:	98 2f       	mov	r25, r24
    72a4:	9f 77       	andi	r25, 0x7F	; 127
    72a6:	91 32       	cpi	r25, 0x21	; 33
    72a8:	b9 f4       	brne	.+46     	; 0x72d8 <EVENT_USB_Device_ControlRequest+0x3a>
	{
		return;
	}

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
    72aa:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <USB_ControlRequest+0x1>
    72ae:	90 32       	cpi	r25, 0x20	; 32
    72b0:	a1 f0       	breq	.+40     	; 0x72da <EVENT_USB_Device_ControlRequest+0x3c>
    72b2:	91 32       	cpi	r25, 0x21	; 33
    72b4:	89 f4       	brne	.+34     	; 0x72d8 <EVENT_USB_Device_ControlRequest+0x3a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    72b6:	81 3a       	cpi	r24, 0xA1	; 161
    72b8:	79 f4       	brne	.+30     	; 0x72d8 <EVENT_USB_Device_ControlRequest+0x3a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    72ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    72be:	87 7f       	andi	r24, 0xF7	; 247
    72c0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    72c4:	67 e0       	ldi	r22, 0x07	; 7
    72c6:	70 e0       	ldi	r23, 0x00	; 0
    72c8:	83 e0       	ldi	r24, 0x03	; 3
    72ca:	91 e0       	ldi	r25, 0x01	; 1
    72cc:	19 d4       	rcall	.+2098   	; 0x7b00 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    72ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    72d2:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    72d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
				Endpoint_ClearIN();
			}

			break;
	}
}
    72d8:	08 95       	ret
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    72da:	81 32       	cpi	r24, 0x21	; 33
    72dc:	e9 f7       	brne	.-6      	; 0x72d8 <EVENT_USB_Device_ControlRequest+0x3a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    72de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    72e2:	87 7f       	andi	r24, 0xF7	; 247
    72e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    72e8:	67 e0       	ldi	r22, 0x07	; 7
    72ea:	70 e0       	ldi	r23, 0x00	; 0
    72ec:	83 e0       	ldi	r24, 0x03	; 3
    72ee:	91 e0       	ldi	r25, 0x01	; 1
    72f0:	60 d4       	rcall	.+2240   	; 0x7bb2 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    72f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    72f6:	8e 77       	andi	r24, 0x7E	; 126
    72f8:	ed cf       	rjmp	.-38     	; 0x72d4 <EVENT_USB_Device_ControlRequest+0x36>

000072fa <CDC_Task>:

/** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the required actions
 *  and send the appropriate response back to the host.
 */
void CDC_Task(void)
{
    72fa:	6f 92       	push	r6
    72fc:	7f 92       	push	r7
    72fe:	8f 92       	push	r8
    7300:	9f 92       	push	r9
    7302:	af 92       	push	r10
    7304:	bf 92       	push	r11
    7306:	cf 92       	push	r12
    7308:	df 92       	push	r13
    730a:	ef 92       	push	r14
    730c:	ff 92       	push	r15
    730e:	0f 93       	push	r16
    7310:	1f 93       	push	r17
    7312:	cf 93       	push	r28
    7314:	df 93       	push	r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7316:	84 e0       	ldi	r24, 0x04	; 4
    7318:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    731c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
    7320:	82 ff       	sbrs	r24, 2
    7322:	28 c2       	rjmp	.+1104   	; 0x7774 <CDC_Task+0x47a>
	  return;
	  
	RX_LED_ON();
    7324:	28 98       	cbi	0x05, 0	; 5
	RxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    7326:	84 e6       	ldi	r24, 0x64	; 100
    7328:	90 e0       	ldi	r25, 0x00	; 0
    732a:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <RxLEDPulse+0x1>
    732e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <RxLEDPulse>

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
    7332:	d8 de       	rcall	.-592    	; 0x70e4 <FetchNextCommandByte>
    7334:	c8 2f       	mov	r28, r24

	if (Command == 'E')
    7336:	85 34       	cpi	r24, 0x45	; 69
    7338:	51 f5       	brne	.+84     	; 0x738e <CDC_Task+0x94>
	{
		/* We nearly run out the bootloader timeout clock, 
		* leaving just a few hundred milliseconds so the 
		* bootloder has time to respond and service any 
		* subsequent requests */
		Timeout = TIMEOUT_PERIOD - 500;
    733a:	8c e4       	ldi	r24, 0x4C	; 76
    733c:	9d e1       	ldi	r25, 0x1D	; 29
    733e:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <__data_end+0x1>
    7342:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__data_end>
	
		/* Re-enable RWW section - must be done here in case 
		 * user has disabled verification on upload.  */
		boot_rww_enable_safe();		
    7346:	07 b6       	in	r0, 0x37	; 55
    7348:	00 fc       	sbrc	r0, 0
    734a:	fd cf       	rjmp	.-6      	; 0x7346 <CDC_Task+0x4c>
    734c:	f9 99       	sbic	0x1f, 1	; 31
    734e:	fe cf       	rjmp	.-4      	; 0x734c <CDC_Task+0x52>
    7350:	81 e1       	ldi	r24, 0x11	; 17
    7352:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7356:	e8 95       	spm
	else if (Command == 'T')
	{
		FetchNextCommandByte();

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
    7358:	8d e0       	ldi	r24, 0x0D	; 13
    735a:	dc de       	rcall	.-584    	; 0x7114 <WriteNextResponseByte>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    735c:	83 e0       	ldi	r24, 0x03	; 3
    735e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7362:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7366:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    736a:	8e 77       	andi	r24, 0x7E	; 126
    736c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
    7370:	95 ff       	sbrs	r25, 5
    7372:	f3 c1       	rjmp	.+998    	; 0x775a <CDC_Task+0x460>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7374:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
    7378:	80 ff       	sbrs	r24, 0
    737a:	f9 c1       	rjmp	.+1010   	; 0x776e <CDC_Task+0x474>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    737c:	84 e0       	ldi	r24, 0x04	; 4
    737e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7382:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7386:	8b 77       	andi	r24, 0x7B	; 123
    7388:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    738c:	f3 c1       	rjmp	.+998    	; 0x7774 <CDC_Task+0x47a>
		boot_rww_enable_safe();		

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'T')
    738e:	84 35       	cpi	r24, 0x54	; 84
	{
		FetchNextCommandByte();
    7390:	11 f4       	brne	.+4      	; 0x7396 <CDC_Task+0x9c>
    7392:	a8 de       	rcall	.-688    	; 0x70e4 <FetchNextCommandByte>
    7394:	e1 cf       	rjmp	.-62     	; 0x7358 <CDC_Task+0x5e>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if ((Command == 'L') || (Command == 'P'))
    7396:	8c 34       	cpi	r24, 0x4C	; 76
    7398:	f9 f2       	breq	.-66     	; 0x7358 <CDC_Task+0x5e>
    739a:	80 35       	cpi	r24, 0x50	; 80
    739c:	e9 f2       	breq	.-70     	; 0x7358 <CDC_Task+0x5e>
	{
		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 't')
    739e:	84 37       	cpi	r24, 0x74	; 116
	{
		// Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader 
		WriteNextResponseByte(0x44);
    73a0:	21 f4       	brne	.+8      	; 0x73aa <CDC_Task+0xb0>
    73a2:	84 e4       	ldi	r24, 0x44	; 68
    73a4:	b7 de       	rcall	.-658    	; 0x7114 <WriteNextResponseByte>
		WriteNextResponseByte(0x00);
    73a6:	80 e0       	ldi	r24, 0x00	; 0
    73a8:	d8 cf       	rjmp	.-80     	; 0x735a <CDC_Task+0x60>
	}
	else if (Command == 'a')
	{
		// Indicate auto-address increment is supported 
		WriteNextResponseByte('Y');
    73aa:	89 e5       	ldi	r24, 0x59	; 89
	{
		// Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader 
		WriteNextResponseByte(0x44);
		WriteNextResponseByte(0x00);
	}
	else if (Command == 'a')
    73ac:	c1 36       	cpi	r28, 0x61	; 97
	{
		// Indicate auto-address increment is supported 
		WriteNextResponseByte('Y');
	}
	else if (Command == 'A')
    73ae:	a9 f2       	breq	.-86     	; 0x735a <CDC_Task+0x60>
	{
		// Set the current address to that given by the host 
		CurrAddress   = (FetchNextCommandByte() << 9);
    73b0:	c1 34       	cpi	r28, 0x41	; 65
    73b2:	d1 f4       	brne	.+52     	; 0x73e8 <CDC_Task+0xee>
    73b4:	97 de       	rcall	.-722    	; 0x70e4 <FetchNextCommandByte>
		CurrAddress  |= (FetchNextCommandByte() << 1);
    73b6:	c8 2f       	mov	r28, r24
    73b8:	95 de       	rcall	.-726    	; 0x70e4 <FetchNextCommandByte>
		WriteNextResponseByte('Y');
	}
	else if (Command == 'A')
	{
		// Set the current address to that given by the host 
		CurrAddress   = (FetchNextCommandByte() << 9);
    73ba:	2c 2f       	mov	r18, r28
    73bc:	30 e0       	ldi	r19, 0x00	; 0
    73be:	32 2f       	mov	r19, r18
    73c0:	22 27       	eor	r18, r18
    73c2:	33 0f       	add	r19, r19
		CurrAddress  |= (FetchNextCommandByte() << 1);
    73c4:	90 e0       	ldi	r25, 0x00	; 0
    73c6:	88 0f       	add	r24, r24
    73c8:	99 1f       	adc	r25, r25
    73ca:	82 2b       	or	r24, r18
    73cc:	93 2b       	or	r25, r19
    73ce:	09 2e       	mov	r0, r25
    73d0:	00 0c       	add	r0, r0
    73d2:	aa 0b       	sbc	r26, r26
    73d4:	bb 0b       	sbc	r27, r27
	{
		// Read the byte from the endpoint and write it to the EEPROM 
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());

		// Increment the address after use
		CurrAddress += 2;
    73d6:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <CurrAddress>
    73da:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <CurrAddress+0x1>
    73de:	a0 93 a8 01 	sts	0x01A8, r26	; 0x8001a8 <CurrAddress+0x2>
    73e2:	b0 93 a9 01 	sts	0x01A9, r27	; 0x8001a9 <CurrAddress+0x3>
    73e6:	b8 cf       	rjmp	.-144    	; 0x7358 <CDC_Task+0x5e>
		WriteNextResponseByte('\r');
	}
	else if (Command == 'p')
	{
		// Indicate serial programmer back to the host 
		WriteNextResponseByte('S');
    73e8:	83 e5       	ldi	r24, 0x53	; 83
		CurrAddress  |= (FetchNextCommandByte() << 1);

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'p')
    73ea:	c0 37       	cpi	r28, 0x70	; 112
    73ec:	09 f4       	brne	.+2      	; 0x73f0 <CDC_Task+0xf6>
	{
		// Indicate serial programmer back to the host 
		WriteNextResponseByte('S');
	}
	else if (Command == 'S')
    73ee:	b5 cf       	rjmp	.-150    	; 0x735a <CDC_Task+0x60>
    73f0:	c3 35       	cpi	r28, 0x53	; 83
    73f2:	49 f4       	brne	.+18     	; 0x7406 <CDC_Task+0x10c>
    73f4:	c6 e9       	ldi	r28, 0x96	; 150
	{
		// Write the 7-byte software identifier to the endpoint 
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    73f6:	d1 e0       	ldi	r29, 0x01	; 1
    73f8:	89 91       	ld	r24, Y+
    73fa:	8c de       	rcall	.-744    	; 0x7114 <WriteNextResponseByte>
		WriteNextResponseByte('S');
	}
	else if (Command == 'S')
	{
		// Write the 7-byte software identifier to the endpoint 
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    73fc:	21 e0       	ldi	r18, 0x01	; 1
    73fe:	cd 39       	cpi	r28, 0x9D	; 157
    7400:	d2 07       	cpc	r29, r18
    7402:	d1 f7       	brne	.-12     	; 0x73f8 <CDC_Task+0xfe>
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == 'V')
    7404:	ab cf       	rjmp	.-170    	; 0x735c <CDC_Task+0x62>
    7406:	c6 35       	cpi	r28, 0x56	; 86
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    7408:	21 f4       	brne	.+8      	; 0x7412 <CDC_Task+0x118>
    740a:	81 e3       	ldi	r24, 0x31	; 49
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    740c:	83 de       	rcall	.-762    	; 0x7114 <WriteNextResponseByte>
    740e:	80 e3       	ldi	r24, 0x30	; 48
	}
	else if (Command == 's')
    7410:	a4 cf       	rjmp	.-184    	; 0x735a <CDC_Task+0x60>
    7412:	c3 37       	cpi	r28, 0x73	; 115
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
    7414:	31 f4       	brne	.+12     	; 0x7422 <CDC_Task+0x128>
    7416:	87 e8       	ldi	r24, 0x87	; 135
    7418:	7d de       	rcall	.-774    	; 0x7114 <WriteNextResponseByte>
		WriteNextResponseByte(AVR_SIGNATURE_2);
    741a:	85 e9       	ldi	r24, 0x95	; 149
    741c:	7b de       	rcall	.-778    	; 0x7114 <WriteNextResponseByte>
    741e:	8e e1       	ldi	r24, 0x1E	; 30
		WriteNextResponseByte(AVR_SIGNATURE_1);
    7420:	9c cf       	rjmp	.-200    	; 0x735a <CDC_Task+0x60>
    7422:	c5 36       	cpi	r28, 0x65	; 101
	}
	else if (Command == 'e')
    7424:	b9 f4       	brne	.+46     	; 0x7454 <CDC_Task+0x15a>
    7426:	f0 e0       	ldi	r31, 0x00	; 0
    7428:	e0 e0       	ldi	r30, 0x00	; 0
    742a:	83 e0       	ldi	r24, 0x03	; 3
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    742c:	95 e0       	ldi	r25, 0x05	; 5
			boot_spm_busy_wait();
			boot_page_write(CurrFlashAddress);
    742e:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
	else if (Command == 'e')
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    7432:	e8 95       	spm
    7434:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
    7436:	00 fc       	sbrc	r0, 0
    7438:	fd cf       	rjmp	.-6      	; 0x7434 <CDC_Task+0x13a>
    743a:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
			boot_page_write(CurrFlashAddress);
    743e:	e8 95       	spm
    7440:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
    7442:	00 fc       	sbrc	r0, 0
    7444:	fd cf       	rjmp	.-6      	; 0x7440 <CDC_Task+0x146>
    7446:	e0 58       	subi	r30, 0x80	; 128
    7448:	ff 4f       	sbci	r31, 0xFF	; 255
    744a:	e1 15       	cp	r30, r1
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == 'e')
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
    744c:	20 e7       	ldi	r18, 0x70	; 112
    744e:	f2 07       	cpc	r31, r18
    7450:	71 f7       	brne	.-36     	; 0x742e <CDC_Task+0x134>
    7452:	82 cf       	rjmp	.-252    	; 0x7358 <CDC_Task+0x5e>
    7454:	89 e0       	ldi	r24, 0x09	; 9
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == 'r')
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    7456:	e1 e0       	ldi	r30, 0x01	; 1
    7458:	f0 e0       	ldi	r31, 0x00	; 0
    745a:	c2 37       	cpi	r28, 0x72	; 114

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == 'r')
    745c:	79 f0       	breq	.+30     	; 0x747c <CDC_Task+0x182>
    745e:	89 e0       	ldi	r24, 0x09	; 9
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
	}
	else if (Command == 'F')
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    7460:	f0 e0       	ldi	r31, 0x00	; 0
    7462:	e0 e0       	ldi	r30, 0x00	; 0
    7464:	c6 34       	cpi	r28, 0x46	; 70
	#endif
	else if (Command == 'r')
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
	}
	else if (Command == 'F')
    7466:	51 f0       	breq	.+20     	; 0x747c <CDC_Task+0x182>
    7468:	89 e0       	ldi	r24, 0x09	; 9
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
	}
	else if (Command == 'N')
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    746a:	e3 e0       	ldi	r30, 0x03	; 3
    746c:	f0 e0       	ldi	r31, 0x00	; 0
    746e:	ce 34       	cpi	r28, 0x4E	; 78
	}
	else if (Command == 'F')
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
	}
	else if (Command == 'N')
    7470:	29 f0       	breq	.+10     	; 0x747c <CDC_Task+0x182>
    7472:	c1 35       	cpi	r28, 0x51	; 81
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
	}
	else if (Command == 'Q')
    7474:	39 f4       	brne	.+14     	; 0x7484 <CDC_Task+0x18a>
    7476:	89 e0       	ldi	r24, 0x09	; 9
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    7478:	e2 e0       	ldi	r30, 0x02	; 2
    747a:	f0 e0       	ldi	r31, 0x00	; 0
    747c:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7480:	84 91       	lpm	r24, Z
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == 'b')
    7482:	6b cf       	rjmp	.-298    	; 0x735a <CDC_Task+0x60>
    7484:	c2 36       	cpi	r28, 0x62	; 98
	{
		WriteNextResponseByte('Y');
    7486:	31 f4       	brne	.+12     	; 0x7494 <CDC_Task+0x19a>
    7488:	89 e5       	ldi	r24, 0x59	; 89
    748a:	44 de       	rcall	.-888    	; 0x7114 <WriteNextResponseByte>

		// Send block size to the host 
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
    748c:	80 e0       	ldi	r24, 0x00	; 0
    748e:	42 de       	rcall	.-892    	; 0x7114 <WriteNextResponseByte>
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    7490:	80 e8       	ldi	r24, 0x80	; 128
    7492:	63 cf       	rjmp	.-314    	; 0x735a <CDC_Task+0x60>
	}
	else if ((Command == 'B') || (Command == 'g'))
    7494:	c2 34       	cpi	r28, 0x42	; 66
    7496:	19 f0       	breq	.+6      	; 0x749e <CDC_Task+0x1a4>
    7498:	c7 36       	cpi	r28, 0x67	; 103
    749a:	09 f0       	breq	.+2      	; 0x749e <CDC_Task+0x1a4>
	{
		// Keep resetting the timeout counter if we're receiving self-programming instructions
		Timeout = 0;
    749c:	ce c0       	rjmp	.+412    	; 0x763a <CDC_Task+0x340>
    749e:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__data_end+0x1>
    74a2:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    74a6:	1e de       	rcall	.-964    	; 0x70e4 <FetchNextCommandByte>
    74a8:	08 2f       	mov	r16, r24
    74aa:	10 e0       	ldi	r17, 0x00	; 0
    74ac:	10 2f       	mov	r17, r16
    74ae:	00 27       	eor	r16, r16
	BlockSize |=  FetchNextCommandByte();
    74b0:	19 de       	rcall	.-974    	; 0x70e4 <FetchNextCommandByte>
    74b2:	08 2b       	or	r16, r24
    74b4:	17 de       	rcall	.-978    	; 0x70e4 <FetchNextCommandByte>

	MemoryType =  FetchNextCommandByte();
    74b6:	d8 2f       	mov	r29, r24
    74b8:	8b eb       	ldi	r24, 0xBB	; 187
    74ba:	8d 0f       	add	r24, r29

	if ((MemoryType != 'E') && (MemoryType != 'F'))
    74bc:	82 30       	cpi	r24, 0x02	; 2
    74be:	10 f0       	brcs	.+4      	; 0x74c4 <CDC_Task+0x1ca>
    74c0:	8f e3       	ldi	r24, 0x3F	; 63
    74c2:	4b cf       	rjmp	.-362    	; 0x735a <CDC_Task+0x60>
	{
		/* Send error byte back to the host */
		WriteNextResponseByte('?');
    74c4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		return;
	}

	/* Disable timer 1 interrupt - can't afford to process nonessential interrupts
	 * while doing SPM tasks */
	TIMSK1 = 0;
    74c8:	c7 36       	cpi	r28, 0x67	; 103
    74ca:	09 f0       	breq	.+2      	; 0x74ce <CDC_Task+0x1d4>

	/* Check if command is to read memory */
	if (Command == 'g')
    74cc:	45 c0       	rjmp	.+138    	; 0x7558 <CDC_Task+0x25e>
    74ce:	81 e1       	ldi	r24, 0x11	; 17
    74d0:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
	{		
		/* Re-enable RWW section */
		boot_rww_enable();
    74d4:	e8 95       	spm
    74d6:	c0 e0       	ldi	r28, 0x00	; 0
    74d8:	bb 24       	eor	r11, r11
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	bool     HighByte = false;
    74da:	b3 94       	inc	r11

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
				  CurrAddress += 2;

				HighByte = !HighByte;
    74dc:	01 50       	subi	r16, 0x01	; 1
    74de:	11 09       	sbc	r17, r1
	if (Command == 'g')
	{		
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
    74e0:	20 f4       	brcc	.+8      	; 0x74ea <CDC_Task+0x1f0>
    74e2:	82 e0       	ldi	r24, 0x02	; 2
    74e4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		/* Send response byte back to the host */
		WriteNextResponseByte('\r');
	}

	/* Re-enable timer 1 interrupt disabled earlier in this routine */	
	TIMSK1 = (1 << OCIE1A);
    74e8:	39 cf       	rjmp	.-398    	; 0x735c <CDC_Task+0x62>
    74ea:	c0 90 a6 01 	lds	r12, 0x01A6	; 0x8001a6 <CurrAddress>
    74ee:	d0 90 a7 01 	lds	r13, 0x01A7	; 0x8001a7 <CurrAddress+0x1>
    74f2:	e0 90 a8 01 	lds	r14, 0x01A8	; 0x8001a8 <CurrAddress+0x2>
    74f6:	f0 90 a9 01 	lds	r15, 0x01A9	; 0x8001a9 <CurrAddress+0x3>
    74fa:	d6 34       	cpi	r29, 0x46	; 70
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == 'F')
    74fc:	b9 f4       	brne	.+46     	; 0x752c <CDC_Task+0x232>
    74fe:	ec 2f       	mov	r30, r28
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    7500:	f0 e0       	ldi	r31, 0x00	; 0
    7502:	ec 29       	or	r30, r12
    7504:	fd 29       	or	r31, r13
    7506:	84 91       	lpm	r24, Z
    7508:	05 de       	rcall	.-1014   	; 0x7114 <WriteNextResponseByte>
    750a:	cc 23       	and	r28, r28
    750c:	69 f0       	breq	.+26     	; 0x7528 <CDC_Task+0x22e>
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
    750e:	82 e0       	ldi	r24, 0x02	; 2
    7510:	c8 0e       	add	r12, r24
				  CurrAddress += 2;
    7512:	d1 1c       	adc	r13, r1
    7514:	e1 1c       	adc	r14, r1
    7516:	f1 1c       	adc	r15, r1
    7518:	c0 92 a6 01 	sts	0x01A6, r12	; 0x8001a6 <CurrAddress>
    751c:	d0 92 a7 01 	sts	0x01A7, r13	; 0x8001a7 <CurrAddress+0x1>
    7520:	e0 92 a8 01 	sts	0x01A8, r14	; 0x8001a8 <CurrAddress+0x2>
    7524:	f0 92 a9 01 	sts	0x01A9, r15	; 0x8001a9 <CurrAddress+0x3>

				HighByte = !HighByte;
    7528:	cb 25       	eor	r28, r11
    752a:	d8 cf       	rjmp	.-80     	; 0x74dc <CDC_Task+0x1e2>
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    752c:	d7 01       	movw	r26, r14
    752e:	c6 01       	movw	r24, r12
    7530:	b6 95       	lsr	r27
    7532:	a7 95       	ror	r26
    7534:	97 95       	ror	r25
    7536:	87 95       	ror	r24
    7538:	88 d4       	rcall	.+2320   	; 0x7e4a <eeprom_read_byte>
    753a:	ec dd       	rcall	.-1064   	; 0x7114 <WriteNextResponseByte>
    753c:	e2 e0       	ldi	r30, 0x02	; 2
    753e:	ce 0e       	add	r12, r30

				/* Increment the address counter after use */
				CurrAddress += 2;
    7540:	d1 1c       	adc	r13, r1
    7542:	e1 1c       	adc	r14, r1
    7544:	f1 1c       	adc	r15, r1
    7546:	c0 92 a6 01 	sts	0x01A6, r12	; 0x8001a6 <CurrAddress>
    754a:	d0 92 a7 01 	sts	0x01A7, r13	; 0x8001a7 <CurrAddress+0x1>
    754e:	e0 92 a8 01 	sts	0x01A8, r14	; 0x8001a8 <CurrAddress+0x2>
    7552:	f0 92 a9 01 	sts	0x01A9, r15	; 0x8001a9 <CurrAddress+0x3>
    7556:	c2 cf       	rjmp	.-124    	; 0x74dc <CDC_Task+0x1e2>
    7558:	80 90 a6 01 	lds	r8, 0x01A6	; 0x8001a6 <CurrAddress>
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
    755c:	90 90 a7 01 	lds	r9, 0x01A7	; 0x8001a7 <CurrAddress+0x1>
    7560:	a0 90 a8 01 	lds	r10, 0x01A8	; 0x8001a8 <CurrAddress+0x2>
    7564:	b0 90 a9 01 	lds	r11, 0x01A9	; 0x8001a9 <CurrAddress+0x3>
    7568:	d6 34       	cpi	r29, 0x46	; 70
    756a:	41 f4       	brne	.+16     	; 0x757c <CDC_Task+0x282>

		if (MemoryType == 'F')
    756c:	83 e0       	ldi	r24, 0x03	; 3
    756e:	f4 01       	movw	r30, r8
		{
			boot_page_erase(PageStartAddress);
    7570:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7574:	e8 95       	spm
    7576:	07 b6       	in	r0, 0x37	; 55
    7578:	00 fc       	sbrc	r0, 0
			boot_spm_busy_wait();
    757a:	fd cf       	rjmp	.-6      	; 0x7576 <CDC_Task+0x27c>
    757c:	71 2c       	mov	r7, r1
    757e:	c0 e0       	ldi	r28, 0x00	; 0
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == 'F')
    7580:	66 24       	eor	r6, r6
				else
				{
					LowByte = FetchNextCommandByte();
				}
				
				HighByte = !HighByte;
    7582:	63 94       	inc	r6
    7584:	24 c0       	rjmp	.+72     	; 0x75ce <CDC_Task+0x2d4>
    7586:	d6 34       	cpi	r29, 0x46	; 70
			boot_spm_busy_wait();
		}

		while (BlockSize--)
		{
			if (MemoryType == 'F')
    7588:	09 f0       	breq	.+2      	; 0x758c <CDC_Task+0x292>
    758a:	34 c0       	rjmp	.+104    	; 0x75f4 <CDC_Task+0x2fa>
    758c:	cc 23       	and	r28, r28
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
    758e:	79 f1       	breq	.+94     	; 0x75ee <CDC_Task+0x2f4>
    7590:	c0 90 a6 01 	lds	r12, 0x01A6	; 0x8001a6 <CurrAddress>
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    7594:	d0 90 a7 01 	lds	r13, 0x01A7	; 0x8001a7 <CurrAddress+0x1>
    7598:	e0 90 a8 01 	lds	r14, 0x01A8	; 0x8001a8 <CurrAddress+0x2>
    759c:	f0 90 a9 01 	lds	r15, 0x01A9	; 0x8001a9 <CurrAddress+0x3>
    75a0:	a1 dd       	rcall	.-1214   	; 0x70e4 <FetchNextCommandByte>
    75a2:	98 2f       	mov	r25, r24
    75a4:	87 2d       	mov	r24, r7
    75a6:	f6 01       	movw	r30, r12
    75a8:	0c 01       	movw	r0, r24
    75aa:	60 92 57 00 	sts	0x0057, r6	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    75ae:	e8 95       	spm
    75b0:	11 24       	eor	r1, r1
    75b2:	f2 e0       	ldi	r31, 0x02	; 2
    75b4:	cf 0e       	add	r12, r31

					/* Increment the address counter after use */
					CurrAddress += 2;
    75b6:	d1 1c       	adc	r13, r1
    75b8:	e1 1c       	adc	r14, r1
    75ba:	f1 1c       	adc	r15, r1
    75bc:	c0 92 a6 01 	sts	0x01A6, r12	; 0x8001a6 <CurrAddress>
    75c0:	d0 92 a7 01 	sts	0x01A7, r13	; 0x8001a7 <CurrAddress+0x1>
    75c4:	e0 92 a8 01 	sts	0x01A8, r14	; 0x8001a8 <CurrAddress+0x2>
    75c8:	f0 92 a9 01 	sts	0x01A9, r15	; 0x8001a9 <CurrAddress+0x3>
				else
				{
					LowByte = FetchNextCommandByte();
				}
				
				HighByte = !HighByte;
    75cc:	c6 25       	eor	r28, r6
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
    75ce:	01 50       	subi	r16, 0x01	; 1
    75d0:	11 09       	sbc	r17, r1
				CurrAddress += 2;
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
    75d2:	c8 f6       	brcc	.-78     	; 0x7586 <CDC_Task+0x28c>
    75d4:	d6 34       	cpi	r29, 0x46	; 70
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    75d6:	41 f4       	brne	.+16     	; 0x75e8 <CDC_Task+0x2ee>
    75d8:	85 e0       	ldi	r24, 0x05	; 5
    75da:	f4 01       	movw	r30, r8
    75dc:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    75e0:	e8 95       	spm
    75e2:	07 b6       	in	r0, 0x37	; 55
    75e4:	00 fc       	sbrc	r0, 0
		}

		/* Send response byte back to the host */
		WriteNextResponseByte('\r');
    75e6:	fd cf       	rjmp	.-6      	; 0x75e2 <CDC_Task+0x2e8>
    75e8:	8d e0       	ldi	r24, 0x0D	; 13
    75ea:	94 dd       	rcall	.-1240   	; 0x7114 <WriteNextResponseByte>
					/* Increment the address counter after use */
					CurrAddress += 2;
				}
				else
				{
					LowByte = FetchNextCommandByte();
    75ec:	7a cf       	rjmp	.-268    	; 0x74e2 <CDC_Task+0x1e8>
    75ee:	7a dd       	rcall	.-1292   	; 0x70e4 <FetchNextCommandByte>
    75f0:	78 2e       	mov	r7, r24
    75f2:	ec cf       	rjmp	.-40     	; 0x75cc <CDC_Task+0x2d2>
				HighByte = !HighByte;
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    75f4:	77 dd       	rcall	.-1298   	; 0x70e4 <FetchNextCommandByte>
    75f6:	68 2f       	mov	r22, r24
    75f8:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <CurrAddress>
    75fc:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <CurrAddress+0x1>
    7600:	a0 91 a8 01 	lds	r26, 0x01A8	; 0x8001a8 <CurrAddress+0x2>
    7604:	b0 91 a9 01 	lds	r27, 0x01A9	; 0x8001a9 <CurrAddress+0x3>
    7608:	b6 95       	lsr	r27
    760a:	a7 95       	ror	r26
    760c:	97 95       	ror	r25
    760e:	87 95       	ror	r24
    7610:	24 d4       	rcall	.+2120   	; 0x7e5a <eeprom_write_byte>
    7612:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <CurrAddress>

				/* Increment the address counter after use */
				CurrAddress += 2;
    7616:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <CurrAddress+0x1>
    761a:	a0 91 a8 01 	lds	r26, 0x01A8	; 0x8001a8 <CurrAddress+0x2>
    761e:	b0 91 a9 01 	lds	r27, 0x01A9	; 0x8001a9 <CurrAddress+0x3>
    7622:	02 96       	adiw	r24, 0x02	; 2
    7624:	a1 1d       	adc	r26, r1
    7626:	b1 1d       	adc	r27, r1
    7628:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <CurrAddress>
    762c:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <CurrAddress+0x1>
    7630:	a0 93 a8 01 	sts	0x01A8, r26	; 0x8001a8 <CurrAddress+0x2>
    7634:	b0 93 a9 01 	sts	0x01A9, r27	; 0x8001a9 <CurrAddress+0x3>
    7638:	ca cf       	rjmp	.-108    	; 0x75ce <CDC_Task+0x2d4>
    763a:	c3 34       	cpi	r28, 0x43	; 67
		// Delegate the block write/read to a separate function for clarity 
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == 'C')
    763c:	71 f4       	brne	.+28     	; 0x765a <CDC_Task+0x360>
    763e:	c0 91 a6 01 	lds	r28, 0x01A6	; 0x8001a6 <CurrAddress>
	{
		// Write the high byte to the current flash page
		boot_page_fill(CurrAddress, FetchNextCommandByte());
    7642:	d0 91 a7 01 	lds	r29, 0x01A7	; 0x8001a7 <CurrAddress+0x1>
    7646:	4e dd       	rcall	.-1380   	; 0x70e4 <FetchNextCommandByte>
    7648:	90 e0       	ldi	r25, 0x00	; 0
    764a:	21 e0       	ldi	r18, 0x01	; 1
    764c:	fe 01       	movw	r30, r28
    764e:	0c 01       	movw	r0, r24
    7650:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7654:	e8 95       	spm
    7656:	11 24       	eor	r1, r1
    7658:	7f ce       	rjmp	.-770    	; 0x7358 <CDC_Task+0x5e>
    765a:	c3 36       	cpi	r28, 0x63	; 99

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'c')
    765c:	01 f5       	brne	.+64     	; 0x769e <CDC_Task+0x3a4>
    765e:	c0 90 a6 01 	lds	r12, 0x01A6	; 0x8001a6 <CurrAddress>
	{
		// Write the low byte to the current flash page 
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
    7662:	d0 90 a7 01 	lds	r13, 0x01A7	; 0x8001a7 <CurrAddress+0x1>
    7666:	e0 90 a8 01 	lds	r14, 0x01A8	; 0x8001a8 <CurrAddress+0x2>
    766a:	f0 90 a9 01 	lds	r15, 0x01A9	; 0x8001a9 <CurrAddress+0x3>
    766e:	3a dd       	rcall	.-1420   	; 0x70e4 <FetchNextCommandByte>
    7670:	f6 01       	movw	r30, r12
    7672:	e1 60       	ori	r30, 0x01	; 1
    7674:	90 e0       	ldi	r25, 0x00	; 0
    7676:	21 e0       	ldi	r18, 0x01	; 1
    7678:	0c 01       	movw	r0, r24
    767a:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    767e:	e8 95       	spm
    7680:	11 24       	eor	r1, r1
    7682:	f2 e0       	ldi	r31, 0x02	; 2
    7684:	cf 0e       	add	r12, r31

		// Increment the address 
		CurrAddress += 2;
    7686:	d1 1c       	adc	r13, r1
    7688:	e1 1c       	adc	r14, r1
    768a:	f1 1c       	adc	r15, r1
    768c:	c0 92 a6 01 	sts	0x01A6, r12	; 0x8001a6 <CurrAddress>
    7690:	d0 92 a7 01 	sts	0x01A7, r13	; 0x8001a7 <CurrAddress+0x1>
    7694:	e0 92 a8 01 	sts	0x01A8, r14	; 0x8001a8 <CurrAddress+0x2>
    7698:	f0 92 a9 01 	sts	0x01A9, r15	; 0x8001a9 <CurrAddress+0x3>
    769c:	5d ce       	rjmp	.-838    	; 0x7358 <CDC_Task+0x5e>
    769e:	cd 36       	cpi	r28, 0x6D	; 109

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'm')
    76a0:	61 f4       	brne	.+24     	; 0x76ba <CDC_Task+0x3c0>
    76a2:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <CurrAddress>
	{
		// Commit the flash page to memory
		boot_page_write(CurrAddress);
    76a6:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <CurrAddress+0x1>
    76aa:	85 e0       	ldi	r24, 0x05	; 5
    76ac:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    76b0:	e8 95       	spm

		// Wait until write operation has completed 
		boot_spm_busy_wait();
    76b2:	07 b6       	in	r0, 0x37	; 55
    76b4:	00 fc       	sbrc	r0, 0
    76b6:	fd cf       	rjmp	.-6      	; 0x76b2 <CDC_Task+0x3b8>
    76b8:	4f ce       	rjmp	.-866    	; 0x7358 <CDC_Task+0x5e>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'R')
    76ba:	c2 35       	cpi	r28, 0x52	; 82
    76bc:	51 f4       	brne	.+20     	; 0x76d2 <CDC_Task+0x3d8>
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
    76be:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <CurrAddress>
    76c2:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <CurrAddress+0x1>
    76c6:	c5 91       	lpm	r28, Z+
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
    76c8:	d4 91       	lpm	r29, Z
    76ca:	8d 2f       	mov	r24, r29
    76cc:	23 dd       	rcall	.-1466   	; 0x7114 <WriteNextResponseByte>
		WriteNextResponseByte(ProgramWord & 0xFF);
    76ce:	8c 2f       	mov	r24, r28
    76d0:	44 ce       	rjmp	.-888    	; 0x735a <CDC_Task+0x60>
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == 'D')
    76d2:	c4 34       	cpi	r28, 0x44	; 68
    76d4:	d9 f4       	brne	.+54     	; 0x770c <CDC_Task+0x412>
	{
		// Read the byte from the endpoint and write it to the EEPROM 
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    76d6:	06 dd       	rcall	.-1524   	; 0x70e4 <FetchNextCommandByte>
    76d8:	68 2f       	mov	r22, r24
    76da:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <CurrAddress>
    76de:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <CurrAddress+0x1>
    76e2:	a0 91 a8 01 	lds	r26, 0x01A8	; 0x8001a8 <CurrAddress+0x2>
    76e6:	b0 91 a9 01 	lds	r27, 0x01A9	; 0x8001a9 <CurrAddress+0x3>
    76ea:	b6 95       	lsr	r27
    76ec:	a7 95       	ror	r26
    76ee:	97 95       	ror	r25
    76f0:	87 95       	ror	r24
    76f2:	b3 d3       	rcall	.+1894   	; 0x7e5a <eeprom_write_byte>
    76f4:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <CurrAddress>

		// Increment the address after use
		CurrAddress += 2;
    76f8:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <CurrAddress+0x1>
    76fc:	a0 91 a8 01 	lds	r26, 0x01A8	; 0x8001a8 <CurrAddress+0x2>
    7700:	b0 91 a9 01 	lds	r27, 0x01A9	; 0x8001a9 <CurrAddress+0x3>
    7704:	02 96       	adiw	r24, 0x02	; 2
    7706:	a1 1d       	adc	r26, r1
    7708:	b1 1d       	adc	r27, r1
    770a:	65 ce       	rjmp	.-822    	; 0x73d6 <CDC_Task+0xdc>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'd')
    770c:	c4 36       	cpi	r28, 0x64	; 100
    770e:	f1 f4       	brne	.+60     	; 0x774c <CDC_Task+0x452>
	{
		// Read the EEPROM byte and write it to the endpoint 
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
    7710:	c0 90 a6 01 	lds	r12, 0x01A6	; 0x8001a6 <CurrAddress>
    7714:	d0 90 a7 01 	lds	r13, 0x01A7	; 0x8001a7 <CurrAddress+0x1>
    7718:	e0 90 a8 01 	lds	r14, 0x01A8	; 0x8001a8 <CurrAddress+0x2>
    771c:	f0 90 a9 01 	lds	r15, 0x01A9	; 0x8001a9 <CurrAddress+0x3>
    7720:	d7 01       	movw	r26, r14
    7722:	c6 01       	movw	r24, r12
    7724:	b6 95       	lsr	r27
    7726:	a7 95       	ror	r26
    7728:	97 95       	ror	r25
    772a:	87 95       	ror	r24
    772c:	8e d3       	rcall	.+1820   	; 0x7e4a <eeprom_read_byte>
    772e:	f2 dc       	rcall	.-1564   	; 0x7114 <WriteNextResponseByte>
    7730:	22 e0       	ldi	r18, 0x02	; 2
    7732:	c2 0e       	add	r12, r18

		// Increment the address after use 
		CurrAddress += 2;
    7734:	d1 1c       	adc	r13, r1
    7736:	e1 1c       	adc	r14, r1
    7738:	f1 1c       	adc	r15, r1
    773a:	c0 92 a6 01 	sts	0x01A6, r12	; 0x8001a6 <CurrAddress>
    773e:	d0 92 a7 01 	sts	0x01A7, r13	; 0x8001a7 <CurrAddress+0x1>
    7742:	e0 92 a8 01 	sts	0x01A8, r14	; 0x8001a8 <CurrAddress+0x2>
    7746:	f0 92 a9 01 	sts	0x01A9, r15	; 0x8001a9 <CurrAddress+0x3>
    774a:	08 ce       	rjmp	.-1008   	; 0x735c <CDC_Task+0x62>
    774c:	cb 31       	cpi	r28, 0x1B	; 27
    774e:	09 f4       	brne	.+2      	; 0x7752 <CDC_Task+0x458>
	}
	#endif
	else if (Command != 27)
    7750:	05 ce       	rjmp	.-1014   	; 0x735c <CDC_Task+0x62>
    7752:	b6 ce       	rjmp	.-660    	; 0x74c0 <CDC_Task+0x1c6>
    7754:	8e b3       	in	r24, 0x1e	; 30
    7756:	88 23       	and	r24, r24
	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7758:	69 f0       	breq	.+26     	; 0x7774 <CDC_Task+0x47a>
    775a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    775e:	80 ff       	sbrs	r24, 0
    7760:	f9 cf       	rjmp	.-14     	; 0x7754 <CDC_Task+0x45a>
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
	{
		while (!(Endpoint_IsINReady()))
    7762:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7766:	8e 77       	andi	r24, 0x7E	; 126
    7768:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    776c:	03 ce       	rjmp	.-1018   	; 0x7374 <CDC_Task+0x7a>
    776e:	8e b3       	in	r24, 0x1e	; 30
    7770:	81 11       	cpse	r24, r1
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    7772:	00 ce       	rjmp	.-1024   	; 0x7374 <CDC_Task+0x7a>
    7774:	df 91       	pop	r29
    7776:	cf 91       	pop	r28
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Acknowledge the command from the host */
	Endpoint_ClearOUT();
}
    7778:	1f 91       	pop	r17
    777a:	0f 91       	pop	r16
    777c:	ff 90       	pop	r15
    777e:	ef 90       	pop	r14
    7780:	df 90       	pop	r13
    7782:	cf 90       	pop	r12
    7784:	bf 90       	pop	r11
    7786:	af 90       	pop	r10
    7788:	9f 90       	pop	r9
    778a:	8f 90       	pop	r8
    778c:	7f 90       	pop	r7
    778e:	6f 90       	pop	r6
    7790:	08 95       	ret

00007792 <main>:
    7792:	20 91 00 08 	lds	r18, 0x0800	; 0x800800 <__bss_end+0x64a>
 *  runs the bootloader processing routine until it times out or is instructed to exit.
 */
int main(void)
{
	/* Save the value of the boot key memory before it is overwritten */
	uint16_t bootKeyPtrVal = *bootKeyPtr;
    7796:	30 91 01 08 	lds	r19, 0x0801	; 0x800801 <__bss_end+0x64b>
	*bootKeyPtr = 0;
    779a:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <__bss_end+0x64b>
    779e:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__bss_end+0x64a>

	/* Check the reason for the reset so we can act accordingly */
	uint8_t  mcusr_state = MCUSR;		// store the initial state of the Status register
    77a2:	84 b7       	in	r24, 0x34	; 52
	MCUSR = 0;							// clear all reset flags	
    77a4:	14 be       	out	0x34, r1	; 52
    77a6:	0f b6       	in	r0, 0x3f	; 63
    77a8:	f8 94       	cli
    77aa:	a8 95       	wdr
    77ac:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    77b0:	98 61       	ori	r25, 0x18	; 24
    77b2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    77b6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    77ba:	0f be       	out	0x3f, r0	; 63

	/* Watchdog may be configured with a 15 ms period so must disable it before going any further */
	wdt_disable();
	
	if (mcusr_state & (1<<EXTRF)) {
    77bc:	81 fd       	sbrc	r24, 1
    77be:	0a c0       	rjmp	.+20     	; 0x77d4 <main+0x42>
		// External reset -  we should continue to self-programming mode.
	} else if ((mcusr_state & (1<<PORF)) && (pgm_read_word(0) != 0xFFFF)) {		
    77c0:	80 ff       	sbrs	r24, 0
    77c2:	1b c0       	rjmp	.+54     	; 0x77fa <main+0x68>
    77c4:	f0 e0       	ldi	r31, 0x00	; 0
    77c6:	e0 e0       	ldi	r30, 0x00	; 0
    77c8:	45 91       	lpm	r20, Z+
    77ca:	54 91       	lpm	r21, Z
    77cc:	4f 3f       	cpi	r20, 0xFF	; 255
    77ce:	5f 4f       	sbci	r21, 0xFF	; 255
    77d0:	a1 f0       	breq	.+40     	; 0x77fa <main+0x68>
		// After a power-on reset skip the bootloader and jump straight to sketch 
		// if one exists.	
		StartSketch();
    77d2:	be dc       	rcall	.-1668   	; 0x7150 <StartSketch>
		// If it looks like an "accidental" watchdog reset then start the sketch.
		StartSketch();
	}
	
	/* Setup hardware required for the bootloader */
	SetupHardware();
    77d4:	e5 dc       	rcall	.-1590   	; 0x71a0 <SetupHardware>
    77d6:	78 94       	sei

	/* Enable global interrupts so that the USB stack can function */
	sei();
    77d8:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__data_end+0x1>
	
	Timeout = 0;
    77dc:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
    77e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <RunBootloader>
	
	while (RunBootloader)
    77e4:	81 11       	cpse	r24, r1
    77e6:	19 c0       	rjmp	.+50     	; 0x781a <main+0x88>
    77e8:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    77ec:	81 60       	ori	r24, 0x01	; 1
    77ee:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Jump to beginning of application space to run the sketch - do not reset */	
	StartSketch();
    77f2:	ae dc       	rcall	.-1700   	; 0x7150 <StartSketch>
    77f4:	90 e0       	ldi	r25, 0x00	; 0
}
    77f6:	80 e0       	ldi	r24, 0x00	; 0
    77f8:	08 95       	ret
    77fa:	83 ff       	sbrs	r24, 3
		// External reset -  we should continue to self-programming mode.
	} else if ((mcusr_state & (1<<PORF)) && (pgm_read_word(0) != 0xFFFF)) {		
		// After a power-on reset skip the bootloader and jump straight to sketch 
		// if one exists.	
		StartSketch();
	} else if ((mcusr_state & (1<<WDRF)) && (bootKeyPtrVal != bootKey) && (pgm_read_word(0) != 0xFFFF)) {	
    77fc:	eb cf       	rjmp	.-42     	; 0x77d4 <main+0x42>
    77fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    7802:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    7806:	82 17       	cp	r24, r18
    7808:	93 07       	cpc	r25, r19
    780a:	21 f3       	breq	.-56     	; 0x77d4 <main+0x42>
    780c:	f0 e0       	ldi	r31, 0x00	; 0
    780e:	e0 e0       	ldi	r30, 0x00	; 0
    7810:	85 91       	lpm	r24, Z+
    7812:	94 91       	lpm	r25, Z
    7814:	01 96       	adiw	r24, 0x01	; 1
    7816:	f1 f2       	breq	.-68     	; 0x77d4 <main+0x42>
	
	Timeout = 0;
	
	while (RunBootloader)
	{
		CDC_Task();
    7818:	dc cf       	rjmp	.-72     	; 0x77d2 <main+0x40>
    781a:	6f dd       	rcall	.-1314   	; 0x72fa <CDC_Task>
		USB_USBTask();
    781c:	ff d2       	rcall	.+1534   	; 0x7e1c <USB_USBTask>
    781e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
		/* Time out and start the sketch if one is present */
		if (Timeout > TIMEOUT_PERIOD)
    7822:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x1>
    7826:	81 34       	cpi	r24, 0x41	; 65
    7828:	9f 41       	sbci	r25, 0x1F	; 31
    782a:	10 f0       	brcs	.+4      	; 0x7830 <main+0x9e>
			RunBootloader = false;
    782c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <RunBootloader>

		LEDPulse();
    7830:	a1 dc       	rcall	.-1726   	; 0x7174 <LEDPulse>
    7832:	d6 cf       	rjmp	.-84     	; 0x77e0 <main+0x4e>

00007834 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    7834:	29 2f       	mov	r18, r25
    7836:	30 e0       	ldi	r19, 0x00	; 0
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    7838:	22 30       	cpi	r18, 0x02	; 2
    783a:	31 05       	cpc	r19, r1
    783c:	71 f0       	breq	.+28     	; 0x785a <CALLBACK_USB_GetDescriptor+0x26>
    783e:	23 30       	cpi	r18, 0x03	; 3
    7840:	31 05       	cpc	r19, r1
    7842:	81 f0       	breq	.+32     	; 0x7864 <CALLBACK_USB_GetDescriptor+0x30>
    7844:	21 30       	cpi	r18, 0x01	; 1
    7846:	31 05       	cpc	r19, r1
    7848:	11 f5       	brne	.+68     	; 0x788e <CALLBACK_USB_GetDescriptor+0x5a>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    784a:	82 e1       	ldi	r24, 0x12	; 18
    784c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    784e:	24 e8       	ldi	r18, 0x84	; 132
    7850:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
    7852:	fa 01       	movw	r30, r20
    7854:	31 83       	std	Z+1, r19	; 0x01
    7856:	20 83       	st	Z, r18
	return Size;
}
    7858:	08 95       	ret
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    785a:	8e e3       	ldi	r24, 0x3E	; 62
    785c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    785e:	26 e4       	ldi	r18, 0x46	; 70
    7860:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    7862:	f7 cf       	rjmp	.-18     	; 0x7852 <CALLBACK_USB_GetDescriptor+0x1e>
		case DTYPE_String:
			if (!(DescriptorNumber))
    7864:	88 23       	and	r24, r24
    7866:	49 f0       	breq	.+18     	; 0x787a <CALLBACK_USB_GetDescriptor+0x46>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
    7868:	81 30       	cpi	r24, 0x01	; 1
    786a:	61 f0       	breq	.+24     	; 0x7884 <CALLBACK_USB_GetDescriptor+0x50>
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
    786c:	82 30       	cpi	r24, 0x02	; 2
    786e:	79 f4       	brne	.+30     	; 0x788e <CALLBACK_USB_GetDescriptor+0x5a>
			{
				Address = &ManufNameString;
				Size	= ManufNameString.Header.Size;
    7870:	86 e1       	ldi	r24, 0x16	; 22
    7872:	90 e0       	ldi	r25, 0x00	; 0
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
			{
				Address = &ManufNameString;
    7874:	2a e0       	ldi	r18, 0x0A	; 10
    7876:	31 e0       	ldi	r19, 0x01	; 1
    7878:	ec cf       	rjmp	.-40     	; 0x7852 <CALLBACK_USB_GetDescriptor+0x1e>
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    787a:	84 e0       	ldi	r24, 0x04	; 4
    787c:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
    787e:	22 e4       	ldi	r18, 0x42	; 66
    7880:	31 e0       	ldi	r19, 0x01	; 1
    7882:	e7 cf       	rjmp	.-50     	; 0x7852 <CALLBACK_USB_GetDescriptor+0x1e>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    7884:	8e e1       	ldi	r24, 0x1E	; 30
    7886:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
			{
				Address = &ProductString;
    7888:	22 e2       	ldi	r18, 0x22	; 34
    788a:	31 e0       	ldi	r19, 0x01	; 1
    788c:	e2 cf       	rjmp	.-60     	; 0x7852 <CALLBACK_USB_GetDescriptor+0x1e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    788e:	90 e0       	ldi	r25, 0x00	; 0
    7890:	80 e0       	ldi	r24, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    7892:	30 e0       	ldi	r19, 0x00	; 0
    7894:	20 e0       	ldi	r18, 0x00	; 0
    7896:	dd cf       	rjmp	.-70     	; 0x7852 <CALLBACK_USB_GetDescriptor+0x1e>

00007898 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    7898:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    789c:	eb ee       	ldi	r30, 0xEB	; 235
    789e:	f0 e0       	ldi	r31, 0x00	; 0
    78a0:	80 81       	ld	r24, Z
    78a2:	81 60       	ori	r24, 0x01	; 1
    78a4:	80 83       	st	Z, r24
    78a6:	ed ee       	ldi	r30, 0xED	; 237
    78a8:	f0 e0       	ldi	r31, 0x00	; 0
    78aa:	10 82       	st	Z, r1
    78ac:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    78b0:	40 83       	st	Z, r20
    78b2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    78b6:	88 1f       	adc	r24, r24
    78b8:	88 27       	eor	r24, r24
    78ba:	88 1f       	adc	r24, r24
    78bc:	08 95       	ret

000078be <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    78be:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <USB_ControlRequest>
    78c2:	87 ff       	sbrs	r24, 7
    78c4:	11 c0       	rjmp	.+34     	; 0x78e8 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    78c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	{
		while (!(Endpoint_IsOUTReceived()))
    78ca:	82 ff       	sbrs	r24, 2
    78cc:	06 c0       	rjmp	.+12     	; 0x78da <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    78ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    78d2:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    78d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    78d8:	03 c0       	rjmp	.+6      	; 0x78e0 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    78da:	8e b3       	in	r24, 0x1e	; 30
    78dc:	81 11       	cpse	r24, r1
    78de:	f3 cf       	rjmp	.-26     	; 0x78c6 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    78e0:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    78e2:	8e b3       	in	r24, 0x1e	; 30
    78e4:	88 23       	and	r24, r24
    78e6:	e1 f3       	breq	.-8      	; 0x78e0 <Endpoint_ClearStatusStage+0x22>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    78e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    78ec:	80 ff       	sbrs	r24, 0
    78ee:	f9 cf       	rjmp	.-14     	; 0x78e2 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    78f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    78f4:	8e 77       	andi	r24, 0x7E	; 126
    78f6:	ee cf       	rjmp	.-36     	; 0x78d4 <Endpoint_ClearStatusStage+0x16>

000078f8 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    78f8:	0f 93       	push	r16
    78fa:	1f 93       	push	r17
    78fc:	cf 93       	push	r28
    78fe:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    7900:	41 d0       	rcall	.+130    	; 0x7984 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    7902:	48 d0       	rcall	.+144    	; 0x7994 <USB_INT_ClearAllInterrupts>
    7904:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    7906:	d0 e0       	ldi	r29, 0x00	; 0
    7908:	88 81       	ld	r24, Y
    790a:	8f 77       	andi	r24, 0x7F	; 127
    790c:	88 83       	st	Y, r24
    790e:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    7910:	80 68       	ori	r24, 0x80	; 128
    7912:	88 83       	st	Y, r24
    7914:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    7916:	8f 7d       	andi	r24, 0xDF	; 223
    7918:	88 83       	st	Y, r24
    791a:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    791c:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    791e:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    7922:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    7924:	10 e0       	ldi	r17, 0x00	; 0
    7926:	f8 01       	movw	r30, r16
    7928:	80 81       	ld	r24, Z
    792a:	8b 7f       	andi	r24, 0xFB	; 251
    792c:	80 83       	st	Z, r24
    792e:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    7930:	81 60       	ori	r24, 0x01	; 1
    7932:	88 83       	st	Y, r24
    7934:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7936:	60 e0       	ldi	r22, 0x00	; 0
    7938:	80 e0       	ldi	r24, 0x00	; 0
    793a:	ae df       	rcall	.-164    	; 0x7898 <Endpoint_ConfigureEndpoint_Prv>
    793c:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    793e:	f0 e0       	ldi	r31, 0x00	; 0
    7940:	80 81       	ld	r24, Z
    7942:	8e 7f       	andi	r24, 0xFE	; 254
    7944:	80 83       	st	Z, r24
    7946:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7948:	f0 e0       	ldi	r31, 0x00	; 0
    794a:	80 81       	ld	r24, Z
    794c:	81 60       	ori	r24, 0x01	; 1
    794e:	80 83       	st	Z, r24
    7950:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    7952:	88 60       	ori	r24, 0x08	; 8
    7954:	80 83       	st	Z, r24
    7956:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    7958:	80 81       	ld	r24, Z
    795a:	8e 7f       	andi	r24, 0xFE	; 254
    795c:	80 83       	st	Z, r24
    795e:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    7960:	80 61       	ori	r24, 0x10	; 16
    7962:	88 83       	st	Y, r24
    7964:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    7966:	cf 91       	pop	r28
    7968:	1f 91       	pop	r17
    796a:	0f 91       	pop	r16
    796c:	08 95       	ret

0000796e <USB_Init>:
    796e:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    7970:	f0 e0       	ldi	r31, 0x00	; 0
    7972:	80 81       	ld	r24, Z
    7974:	81 60       	ori	r24, 0x01	; 1
    7976:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
    7978:	8a e4       	ldi	r24, 0x4A	; 74
    797a:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    797c:	81 e0       	ldi	r24, 0x01	; 1
    797e:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <USB_IsInitialized>

	USB_ResetInterface();
    7982:	ba cf       	rjmp	.-140    	; 0x78f8 <USB_ResetInterface>

00007984 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    7984:	e8 ed       	ldi	r30, 0xD8	; 216
    7986:	f0 e0       	ldi	r31, 0x00	; 0
    7988:	80 81       	ld	r24, Z
    798a:	8e 7f       	andi	r24, 0xFE	; 254
    798c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    798e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
	#endif
}
    7992:	08 95       	ret

00007994 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    7994:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    7998:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	#endif
}
    799c:	08 95       	ret

0000799e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    799e:	1f 92       	push	r1
    79a0:	0f 92       	push	r0
    79a2:	0f b6       	in	r0, 0x3f	; 63
    79a4:	0f 92       	push	r0
    79a6:	11 24       	eor	r1, r1
    79a8:	2f 93       	push	r18
    79aa:	3f 93       	push	r19
    79ac:	4f 93       	push	r20
    79ae:	5f 93       	push	r21
    79b0:	6f 93       	push	r22
    79b2:	7f 93       	push	r23
    79b4:	8f 93       	push	r24
    79b6:	9f 93       	push	r25
    79b8:	af 93       	push	r26
    79ba:	bf 93       	push	r27
    79bc:	ef 93       	push	r30
    79be:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    79c0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    79c4:	80 ff       	sbrs	r24, 0
    79c6:	17 c0       	rjmp	.+46     	; 0x79f6 <__vector_10+0x58>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    79c8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    79cc:	80 ff       	sbrs	r24, 0
    79ce:	13 c0       	rjmp	.+38     	; 0x79f6 <__vector_10+0x58>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    79d0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
    79d4:	8e 7f       	andi	r24, 0xFE	; 254
    79d6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    79da:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    79de:	80 ff       	sbrs	r24, 0
    79e0:	4e c0       	rjmp	.+156    	; 0x7a7e <__vector_10+0xe0>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    79e2:	80 e1       	ldi	r24, 0x10	; 16
    79e4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    79e6:	82 e1       	ldi	r24, 0x12	; 18
    79e8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    79ea:	09 b4       	in	r0, 0x29	; 41
    79ec:	00 fe       	sbrs	r0, 0
    79ee:	fd cf       	rjmp	.-6      	; 0x79ea <__vector_10+0x4c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    79f0:	81 e0       	ldi	r24, 0x01	; 1
    79f2:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    79f4:	12 d2       	rcall	.+1060   	; 0x7e1a <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    79f6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    79fa:	80 ff       	sbrs	r24, 0
    79fc:	17 c0       	rjmp	.+46     	; 0x7a2c <__vector_10+0x8e>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    79fe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7a02:	80 ff       	sbrs	r24, 0
    7a04:	13 c0       	rjmp	.+38     	; 0x7a2c <__vector_10+0x8e>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7a06:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7a0a:	8e 7f       	andi	r24, 0xFE	; 254
    7a0c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7a10:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7a14:	80 61       	ori	r24, 0x10	; 16
    7a16:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    7a1a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    7a1e:	80 62       	ori	r24, 0x20	; 32
    7a20:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7a24:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    7a26:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
    7a28:	8e bb       	out	0x1e, r24	; 30
    7a2a:	f7 d1       	rcall	.+1006   	; 0x7e1a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    7a2c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7a30:	84 ff       	sbrs	r24, 4
    7a32:	30 c0       	rjmp	.+96     	; 0x7a94 <__vector_10+0xf6>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    7a34:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7a38:	84 ff       	sbrs	r24, 4
    7a3a:	2c c0       	rjmp	.+88     	; 0x7a94 <__vector_10+0xf6>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7a3c:	80 e1       	ldi	r24, 0x10	; 16
    7a3e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7a40:	82 e1       	ldi	r24, 0x12	; 18
    7a42:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7a44:	09 b4       	in	r0, 0x29	; 41
    7a46:	00 fe       	sbrs	r0, 0
    7a48:	fd cf       	rjmp	.-6      	; 0x7a44 <__vector_10+0xa6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    7a4a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    7a4e:	8f 7d       	andi	r24, 0xDF	; 223
    7a50:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    7a54:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    7a58:	8f 7e       	andi	r24, 0xEF	; 239
    7a5a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    7a5e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7a62:	8f 7e       	andi	r24, 0xEF	; 239
    7a64:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7a68:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7a6c:	81 60       	ori	r24, 0x01	; 1
    7a6e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    7a72:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <USB_Device_ConfigurationNumber>
    7a76:	88 23       	and	r24, r24
    7a78:	31 f0       	breq	.+12     	; 0x7a86 <__vector_10+0xe8>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7a7a:	84 e0       	ldi	r24, 0x04	; 4
    7a7c:	09 c0       	rjmp	.+18     	; 0x7a90 <__vector_10+0xf2>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    7a7e:	19 bc       	out	0x29, r1	; 41
			EVENT_USB_Device_Disconnect();
    7a80:	1e ba       	out	0x1e, r1	; 30
    7a82:	cb d1       	rcall	.+918    	; 0x7e1a <USB_Event_Stub>
    7a84:	b8 cf       	rjmp	.-144    	; 0x79f6 <__vector_10+0x58>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7a86:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7a8a:	87 fd       	sbrc	r24, 7
    7a8c:	f6 cf       	rjmp	.-20     	; 0x7a7a <__vector_10+0xdc>
    7a8e:	81 e0       	ldi	r24, 0x01	; 1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7a90:	8e bb       	out	0x1e, r24	; 30
    7a92:	c3 d1       	rcall	.+902    	; 0x7e1a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7a94:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    7a98:	83 ff       	sbrs	r24, 3
    7a9a:	21 c0       	rjmp	.+66     	; 0x7ade <__vector_10+0x140>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    7a9c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7aa0:	83 ff       	sbrs	r24, 3
    7aa2:	1d c0       	rjmp	.+58     	; 0x7ade <__vector_10+0x140>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    7aa4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    7aa8:	87 7f       	andi	r24, 0xF7	; 247
    7aaa:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    7aae:	82 e0       	ldi	r24, 0x02	; 2
    7ab0:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    7ab2:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7ab6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    7aba:	8e 7f       	andi	r24, 0xFE	; 254
    7abc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7ac0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7ac4:	8e 7f       	andi	r24, 0xFE	; 254
    7ac6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7aca:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7ace:	80 61       	ori	r24, 0x10	; 16
    7ad0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7ad4:	42 e0       	ldi	r20, 0x02	; 2
    7ad6:	60 e0       	ldi	r22, 0x00	; 0
    7ad8:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7ada:	de de       	rcall	.-580    	; 0x7898 <Endpoint_ConfigureEndpoint_Prv>
    7adc:	9e d1       	rcall	.+828    	; 0x7e1a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7ade:	ff 91       	pop	r31
    7ae0:	ef 91       	pop	r30
    7ae2:	bf 91       	pop	r27
    7ae4:	af 91       	pop	r26
    7ae6:	9f 91       	pop	r25
    7ae8:	8f 91       	pop	r24
    7aea:	7f 91       	pop	r23
    7aec:	6f 91       	pop	r22
    7aee:	5f 91       	pop	r21
    7af0:	4f 91       	pop	r20
    7af2:	3f 91       	pop	r19
    7af4:	2f 91       	pop	r18
    7af6:	0f 90       	pop	r0
    7af8:	0f be       	out	0x3f, r0	; 63
    7afa:	0f 90       	pop	r0
    7afc:	1f 90       	pop	r1
    7afe:	18 95       	reti

00007b00 <Endpoint_Write_Control_Stream_LE>:
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7b00:	fc 01       	movw	r30, r24
    7b02:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <USB_ControlRequest+0x6>
    7b06:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <USB_ControlRequest+0x7>
    7b0a:	86 17       	cp	r24, r22
    7b0c:	97 07       	cpc	r25, r23
    7b0e:	a0 f0       	brcs	.+40     	; 0x7b38 <Endpoint_Write_Control_Stream_LE+0x38>
    7b10:	61 15       	cp	r22, r1
    7b12:	71 05       	cpc	r23, r1
    7b14:	29 f4       	brne	.+10     	; 0x7b20 <Endpoint_Write_Control_Stream_LE+0x20>
    7b16:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7b1a:	9e 77       	andi	r25, 0x7E	; 126
    7b1c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7b20:	90 e0       	ldi	r25, 0x00	; 0
    7b22:	61 15       	cp	r22, r1
    7b24:	71 05       	cpc	r23, r1
    7b26:	51 f4       	brne	.+20     	; 0x7b3c <Endpoint_Write_Control_Stream_LE+0x3c>
    7b28:	91 11       	cpse	r25, r1
    7b2a:	08 c0       	rjmp	.+16     	; 0x7b3c <Endpoint_Write_Control_Stream_LE+0x3c>
    7b2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7b30:	82 ff       	sbrs	r24, 2
    7b32:	34 c0       	rjmp	.+104    	; 0x7b9c <Endpoint_Write_Control_Stream_LE+0x9c>
    7b34:	80 e0       	ldi	r24, 0x00	; 0
    7b36:	08 95       	ret
    7b38:	bc 01       	movw	r22, r24
    7b3a:	f2 cf       	rjmp	.-28     	; 0x7b20 <Endpoint_Write_Control_Stream_LE+0x20>
    7b3c:	8e b3       	in	r24, 0x1e	; 30
    7b3e:	88 23       	and	r24, r24
    7b40:	b1 f1       	breq	.+108    	; 0x7bae <Endpoint_Write_Control_Stream_LE+0xae>
    7b42:	85 30       	cpi	r24, 0x05	; 5
    7b44:	81 f1       	breq	.+96     	; 0x7ba6 <Endpoint_Write_Control_Stream_LE+0xa6>
    7b46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7b4a:	83 fd       	sbrc	r24, 3
    7b4c:	2e c0       	rjmp	.+92     	; 0x7baa <Endpoint_Write_Control_Stream_LE+0xaa>
    7b4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7b52:	82 fd       	sbrc	r24, 2
    7b54:	eb cf       	rjmp	.-42     	; 0x7b2c <Endpoint_Write_Control_Stream_LE+0x2c>
    7b56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7b5a:	80 ff       	sbrs	r24, 0
    7b5c:	e2 cf       	rjmp	.-60     	; 0x7b22 <Endpoint_Write_Control_Stream_LE+0x22>
    7b5e:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
    7b62:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    7b66:	32 2f       	mov	r19, r18
    7b68:	28 2f       	mov	r18, r24
    7b6a:	61 15       	cp	r22, r1
    7b6c:	71 05       	cpc	r23, r1
    7b6e:	19 f0       	breq	.+6      	; 0x7b76 <Endpoint_Write_Control_Stream_LE+0x76>
    7b70:	28 30       	cpi	r18, 0x08	; 8
    7b72:	31 05       	cpc	r19, r1
    7b74:	58 f0       	brcs	.+22     	; 0x7b8c <Endpoint_Write_Control_Stream_LE+0x8c>
    7b76:	91 e0       	ldi	r25, 0x01	; 1
    7b78:	28 30       	cpi	r18, 0x08	; 8
    7b7a:	31 05       	cpc	r19, r1
    7b7c:	09 f0       	breq	.+2      	; 0x7b80 <Endpoint_Write_Control_Stream_LE+0x80>
    7b7e:	90 e0       	ldi	r25, 0x00	; 0
    7b80:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7b84:	2e 77       	andi	r18, 0x7E	; 126
    7b86:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7b8a:	cb cf       	rjmp	.-106    	; 0x7b22 <Endpoint_Write_Control_Stream_LE+0x22>
    7b8c:	81 91       	ld	r24, Z+
    7b8e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    7b92:	61 50       	subi	r22, 0x01	; 1
    7b94:	71 09       	sbc	r23, r1
    7b96:	2f 5f       	subi	r18, 0xFF	; 255
    7b98:	3f 4f       	sbci	r19, 0xFF	; 255
    7b9a:	e7 cf       	rjmp	.-50     	; 0x7b6a <Endpoint_Write_Control_Stream_LE+0x6a>
    7b9c:	8e b3       	in	r24, 0x1e	; 30
    7b9e:	88 23       	and	r24, r24
    7ba0:	31 f0       	breq	.+12     	; 0x7bae <Endpoint_Write_Control_Stream_LE+0xae>
    7ba2:	85 30       	cpi	r24, 0x05	; 5
    7ba4:	19 f6       	brne	.-122    	; 0x7b2c <Endpoint_Write_Control_Stream_LE+0x2c>
    7ba6:	83 e0       	ldi	r24, 0x03	; 3
    7ba8:	08 95       	ret
    7baa:	81 e0       	ldi	r24, 0x01	; 1
    7bac:	08 95       	ret
    7bae:	82 e0       	ldi	r24, 0x02	; 2
    7bb0:	08 95       	ret

00007bb2 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    7bb2:	fc 01       	movw	r30, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    7bb4:	61 15       	cp	r22, r1
    7bb6:	71 05       	cpc	r23, r1
    7bb8:	29 f4       	brne	.+10     	; 0x7bc4 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7bba:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7bbe:	9b 77       	andi	r25, 0x7B	; 123
    7bc0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	  Endpoint_ClearOUT();

	while (Length)
    7bc4:	61 15       	cp	r22, r1
    7bc6:	71 05       	cpc	r23, r1
    7bc8:	31 f4       	brne	.+12     	; 0x7bd6 <Endpoint_Read_Control_Stream_LE+0x24>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7bca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    7bce:	80 ff       	sbrs	r24, 0
    7bd0:	1e c0       	rjmp	.+60     	; 0x7c0e <Endpoint_Read_Control_Stream_LE+0x5c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7bd2:	80 e0       	ldi	r24, 0x00	; 0
    7bd4:	08 95       	ret
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7bd6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7bd8:	88 23       	and	r24, r24
    7bda:	11 f1       	breq	.+68     	; 0x7c20 <Endpoint_Read_Control_Stream_LE+0x6e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7bdc:	85 30       	cpi	r24, 0x05	; 5
    7bde:	e1 f0       	breq	.+56     	; 0x7c18 <Endpoint_Read_Control_Stream_LE+0x66>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7be0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7be4:	83 fd       	sbrc	r24, 3
    7be6:	1a c0       	rjmp	.+52     	; 0x7c1c <Endpoint_Read_Control_Stream_LE+0x6a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7be8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    7bec:	82 ff       	sbrs	r24, 2
    7bee:	ea cf       	rjmp	.-44     	; 0x7bc4 <Endpoint_Read_Control_Stream_LE+0x12>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7bf0:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
    7bf4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    7bf8:	32 2f       	mov	r19, r18
    7bfa:	28 2f       	mov	r18, r24
		{
			while (Length && Endpoint_BytesInEndpoint())
    7bfc:	23 2b       	or	r18, r19
    7bfe:	e9 f2       	breq	.-70     	; 0x7bba <Endpoint_Read_Control_Stream_LE+0x8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7c00:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7c04:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7c06:	61 50       	subi	r22, 0x01	; 1
    7c08:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    7c0a:	91 f7       	brne	.-28     	; 0x7bf0 <Endpoint_Read_Control_Stream_LE+0x3e>
    7c0c:	d6 cf       	rjmp	.-84     	; 0x7bba <Endpoint_Read_Control_Stream_LE+0x8>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7c0e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7c10:	88 23       	and	r24, r24
    7c12:	31 f0       	breq	.+12     	; 0x7c20 <Endpoint_Read_Control_Stream_LE+0x6e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7c14:	85 30       	cpi	r24, 0x05	; 5
    7c16:	c9 f6       	brne	.-78     	; 0x7bca <Endpoint_Read_Control_Stream_LE+0x18>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7c18:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7c1a:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7c1c:	81 e0       	ldi	r24, 0x01	; 1
    7c1e:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7c20:	82 e0       	ldi	r24, 0x02	; 2
    7c22:	08 95       	ret

00007c24 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7c24:	0f 93       	push	r16
    7c26:	1f 93       	push	r17
    7c28:	cf 93       	push	r28
    7c2a:	df 93       	push	r29
    7c2c:	00 d0       	rcall	.+0      	; 0x7c2e <USB_Device_ProcessControlRequest+0xa>
    7c2e:	cd b7       	in	r28, 0x3d	; 61
    7c30:	de b7       	in	r29, 0x3e	; 62
    7c32:	ee ea       	ldi	r30, 0xAE	; 174
    7c34:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7c36:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    7c3a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7c3c:	81 e0       	ldi	r24, 0x01	; 1
    7c3e:	e6 3b       	cpi	r30, 0xB6	; 182
    7c40:	f8 07       	cpc	r31, r24
    7c42:	c9 f7       	brne	.-14     	; 0x7c36 <USB_Device_ProcessControlRequest+0x12>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    7c44:	2c db       	rcall	.-2472   	; 0x729e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	if (Endpoint_IsSETUPReceived())
    7c4a:	83 ff       	sbrs	r24, 3
    7c4c:	8a c0       	rjmp	.+276    	; 0x7d62 <USB_Device_ProcessControlRequest+0x13e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7c4e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    7c52:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <USB_ControlRequest+0x1>
    7c56:	9a 30       	cpi	r25, 0x0A	; 10
    7c58:	08 f0       	brcs	.+2      	; 0x7c5c <USB_Device_ProcessControlRequest+0x38>
    7c5a:	83 c0       	rjmp	.+262    	; 0x7d62 <USB_Device_ProcessControlRequest+0x13e>
    7c5c:	e9 2f       	mov	r30, r25
    7c5e:	f0 e0       	ldi	r31, 0x00	; 0
    7c60:	ed 5c       	subi	r30, 0xCD	; 205
    7c62:	f1 4c       	sbci	r31, 0xC1	; 193
    7c64:	ec c0       	rjmp	.+472    	; 0x7e3e <__tablejump2__>
    7c66:	3d 3e       	cpi	r19, 0xED	; 237
    7c68:	59 3e       	cpi	r21, 0xE9	; 233
    7c6a:	b1 3e       	cpi	r27, 0xE1	; 225
    7c6c:	59 3e       	cpi	r21, 0xE9	; 233
    7c6e:	b1 3e       	cpi	r27, 0xE1	; 225
    7c70:	92 3e       	cpi	r25, 0xE2	; 226
    7c72:	c6 3e       	cpi	r28, 0xE6	; 230
    7c74:	b1 3e       	cpi	r27, 0xE1	; 225
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7c76:	e4 3e       	cpi	r30, 0xE4	; 228
    7c78:	f0 3e       	cpi	r31, 0xE0	; 224
    7c7a:	82 38       	cpi	r24, 0x82	; 130
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7c7c:	09 f0       	breq	.+2      	; 0x7c80 <USB_Device_ProcessControlRequest+0x5c>
    7c7e:	71 c0       	rjmp	.+226    	; 0x7d62 <USB_Device_ProcessControlRequest+0x13e>
    7c80:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <USB_ControlRequest+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7c84:	87 70       	andi	r24, 0x07	; 7
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7c86:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    7c8a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    7c8e:	85 fb       	bst	r24, 5
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7c90:	88 27       	eor	r24, r24
    7c92:	80 f9       	bld	r24, 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7c94:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    7c98:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7c9c:	97 7f       	andi	r25, 0xF7	; 247
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7c9e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
				UEDATX = (Data >> 8);
    7ca2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7ca6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    7caa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7cae:	8e 77       	andi	r24, 0x7E	; 126
    7cb0:	22 c0       	rjmp	.+68     	; 0x7cf6 <USB_Device_ProcessControlRequest+0xd2>
    7cb2:	28 2f       	mov	r18, r24
    7cb4:	2d 7f       	andi	r18, 0xFD	; 253
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    7cb6:	09 f0       	breq	.+2      	; 0x7cba <USB_Device_ProcessControlRequest+0x96>
    7cb8:	54 c0       	rjmp	.+168    	; 0x7d62 <USB_Device_ProcessControlRequest+0x13e>
    7cba:	82 30       	cpi	r24, 0x02	; 2

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7cbc:	09 f0       	breq	.+2      	; 0x7cc0 <USB_Device_ProcessControlRequest+0x9c>
    7cbe:	51 c0       	rjmp	.+162    	; 0x7d62 <USB_Device_ProcessControlRequest+0x13e>
    7cc0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <USB_ControlRequest+0x2>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7cc4:	81 11       	cpse	r24, r1
    7cc6:	12 c0       	rjmp	.+36     	; 0x7cec <USB_Device_ProcessControlRequest+0xc8>
    7cc8:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <USB_ControlRequest+0x4>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    7ccc:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7cce:	09 f4       	brne	.+2      	; 0x7cd2 <USB_Device_ProcessControlRequest+0xae>
    7cd0:	48 c0       	rjmp	.+144    	; 0x7d62 <USB_Device_ProcessControlRequest+0x13e>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7cd2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7cd6:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7cda:	20 ff       	sbrs	r18, 0
    7cdc:	07 c0       	rjmp	.+14     	; 0x7cec <USB_Device_ProcessControlRequest+0xc8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7cde:	93 30       	cpi	r25, 0x03	; 3
    7ce0:	71 f4       	brne	.+28     	; 0x7cfe <USB_Device_ProcessControlRequest+0xda>
    7ce2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7ce6:	80 62       	ori	r24, 0x20	; 32
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7ce8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7cec:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    7cf0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7cf4:	87 7f       	andi	r24, 0xF7	; 247
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7cf6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7cfa:	e1 dd       	rcall	.-1086   	; 0x78be <Endpoint_ClearStatusStage>
    7cfc:	32 c0       	rjmp	.+100    	; 0x7d62 <USB_Device_ProcessControlRequest+0x13e>
    7cfe:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    7d02:	90 61       	ori	r25, 0x10	; 16
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    7d04:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    7d08:	21 e0       	ldi	r18, 0x01	; 1
    7d0a:	30 e0       	ldi	r19, 0x00	; 0
    7d0c:	01 c0       	rjmp	.+2      	; 0x7d10 <USB_Device_ProcessControlRequest+0xec>
    7d0e:	22 0f       	add	r18, r18
    7d10:	8a 95       	dec	r24
    7d12:	ea f7       	brpl	.-6      	; 0x7d0e <USB_Device_ProcessControlRequest+0xea>
				UERST = 0;
    7d14:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7d18:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>
    7d1c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7d20:	88 60       	ori	r24, 0x08	; 8
    7d22:	e2 cf       	rjmp	.-60     	; 0x7ce8 <USB_Device_ProcessControlRequest+0xc4>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    7d24:	81 11       	cpse	r24, r1
    7d26:	1d c0       	rjmp	.+58     	; 0x7d62 <USB_Device_ProcessControlRequest+0x13e>
    7d28:	10 91 b0 01 	lds	r17, 0x01B0	; 0x8001b0 <USB_ControlRequest+0x2>
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    7d2c:	1f 77       	andi	r17, 0x7F	; 127
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d2e:	0f b7       	in	r16, 0x3f	; 63
    7d30:	f8 94       	cli
    7d32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7d36:	87 7f       	andi	r24, 0xF7	; 247
    7d38:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7d3c:	c0 dd       	rcall	.-1152   	; 0x78be <Endpoint_ClearStatusStage>

	while (!(Endpoint_IsINReady()));
    7d3e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7d42:	80 ff       	sbrs	r24, 0
    7d44:	fc cf       	rjmp	.-8      	; 0x7d3e <USB_Device_ProcessControlRequest+0x11a>
    7d46:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

				UDADDR = Temp;
    7d4a:	80 78       	andi	r24, 0x80	; 128
    7d4c:	81 2b       	or	r24, r17
				UDADDR = Temp | (1 << ADDEN);
    7d4e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
    7d52:	80 68       	ori	r24, 0x80	; 128

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7d54:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
    7d58:	82 e0       	ldi	r24, 0x02	; 2
    7d5a:	11 11       	cpse	r17, r1
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    7d5c:	83 e0       	ldi	r24, 0x03	; 3
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7d5e:	8e bb       	out	0x1e, r24	; 30
    7d60:	0f bf       	out	0x3f, r16	; 63

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7d62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7d66:	83 ff       	sbrs	r24, 3
    7d68:	0a c0       	rjmp	.+20     	; 0x7d7e <USB_Device_ProcessControlRequest+0x15a>
    7d6a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    7d6e:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d70:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    7d74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7d78:	87 7f       	andi	r24, 0xF7	; 247
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    7d7a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7d7e:	0f 90       	pop	r0
    7d80:	0f 90       	pop	r0
    7d82:	df 91       	pop	r29
    7d84:	cf 91       	pop	r28
    7d86:	1f 91       	pop	r17
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7d88:	0f 91       	pop	r16
    7d8a:	08 95       	ret
    7d8c:	80 58       	subi	r24, 0x80	; 128
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7d8e:	82 30       	cpi	r24, 0x02	; 2
    7d90:	40 f7       	brcc	.-48     	; 0x7d62 <USB_Device_ProcessControlRequest+0x13e>
    7d92:	ae 01       	movw	r20, r28
    7d94:	4f 5f       	subi	r20, 0xFF	; 255
    7d96:	5f 4f       	sbci	r21, 0xFF	; 255
    7d98:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <USB_ControlRequest+0x4>
    7d9c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <USB_ControlRequest+0x2>
    7da0:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <USB_ControlRequest+0x3>
    7da4:	47 dd       	rcall	.-1394   	; 0x7834 <CALLBACK_USB_GetDescriptor>
    7da6:	bc 01       	movw	r22, r24
    7da8:	89 2b       	or	r24, r25
    7daa:	d9 f2       	breq	.-74     	; 0x7d62 <USB_Device_ProcessControlRequest+0x13e>
    7dac:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7db0:	97 7f       	andi	r25, 0xF7	; 247
    7db2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7db6:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7db8:	9a 81       	ldd	r25, Y+2	; 0x02
    7dba:	a2 de       	rcall	.-700    	; 0x7b00 <Endpoint_Write_Control_Stream_LE>
    7dbc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7dc0:	8b 77       	andi	r24, 0x7B	; 123
    7dc2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7dc6:	cd cf       	rjmp	.-102    	; 0x7d62 <USB_Device_ProcessControlRequest+0x13e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7dc8:	80 38       	cpi	r24, 0x80	; 128
    7dca:	59 f6       	brne	.-106    	; 0x7d62 <USB_Device_ProcessControlRequest+0x13e>
    7dcc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7dd0:	87 7f       	andi	r24, 0xF7	; 247

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7dd2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7dd6:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <USB_Device_ConfigurationNumber>
    7dda:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7dde:	65 cf       	rjmp	.-310    	; 0x7caa <USB_Device_ProcessControlRequest+0x86>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7de0:	81 11       	cpse	r24, r1
    7de2:	bf cf       	rjmp	.-130    	; 0x7d62 <USB_Device_ProcessControlRequest+0x13e>
    7de4:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <USB_ControlRequest+0x2>
    7de8:	92 30       	cpi	r25, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7dea:	08 f0       	brcs	.+2      	; 0x7dee <USB_Device_ProcessControlRequest+0x1ca>
    7dec:	ba cf       	rjmp	.-140    	; 0x7d62 <USB_Device_ProcessControlRequest+0x13e>
    7dee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7df2:	87 7f       	andi	r24, 0xF7	; 247
    7df4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	Endpoint_ClearStatusStage();
    7df8:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <USB_Device_ConfigurationNumber>

	if (USB_Device_ConfigurationNumber)
    7dfc:	60 dd       	rcall	.-1344   	; 0x78be <Endpoint_ClearStatusStage>
    7dfe:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <USB_Device_ConfigurationNumber>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7e02:	88 23       	and	r24, r24
    7e04:	11 f0       	breq	.+4      	; 0x7e0a <USB_Device_ProcessControlRequest+0x1e6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7e06:	84 e0       	ldi	r24, 0x04	; 4
    7e08:	05 c0       	rjmp	.+10     	; 0x7e14 <USB_Device_ProcessControlRequest+0x1f0>
    7e0a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
    7e0e:	87 fd       	sbrc	r24, 7

	EVENT_USB_Device_ConfigurationChanged();
    7e10:	fa cf       	rjmp	.-12     	; 0x7e06 <USB_Device_ProcessControlRequest+0x1e2>
    7e12:	81 e0       	ldi	r24, 0x01	; 1
    7e14:	8e bb       	out	0x1e, r24	; 30
    7e16:	37 da       	rcall	.-2962   	; 0x7286 <EVENT_USB_Device_ConfigurationChanged>
    7e18:	a4 cf       	rjmp	.-184    	; 0x7d62 <USB_Device_ProcessControlRequest+0x13e>

00007e1a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    7e1a:	08 95       	ret

00007e1c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7e1c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    7e1e:	8e b3       	in	r24, 0x1e	; 30
    7e20:	88 23       	and	r24, r24
    7e22:	59 f0       	breq	.+22     	; 0x7e3a <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7e24:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    7e28:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7e2a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    7e32:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    7e34:	f7 de       	rcall	.-530    	; 0x7c24 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7e36:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    7e3a:	cf 91       	pop	r28
    7e3c:	08 95       	ret

00007e3e <__tablejump2__>:
    7e3e:	ee 0f       	add	r30, r30
    7e40:	ff 1f       	adc	r31, r31
    7e42:	05 90       	lpm	r0, Z+
    7e44:	f4 91       	lpm	r31, Z
    7e46:	e0 2d       	mov	r30, r0
    7e48:	09 94       	ijmp

00007e4a <eeprom_read_byte>:
    7e4a:	f9 99       	sbic	0x1f, 1	; 31
    7e4c:	fe cf       	rjmp	.-4      	; 0x7e4a <eeprom_read_byte>
    7e4e:	92 bd       	out	0x22, r25	; 34
    7e50:	81 bd       	out	0x21, r24	; 33
    7e52:	f8 9a       	sbi	0x1f, 0	; 31
    7e54:	99 27       	eor	r25, r25
    7e56:	80 b5       	in	r24, 0x20	; 32
    7e58:	08 95       	ret

00007e5a <eeprom_write_byte>:
    7e5a:	26 2f       	mov	r18, r22

00007e5c <eeprom_write_r18>:
    7e5c:	f9 99       	sbic	0x1f, 1	; 31
    7e5e:	fe cf       	rjmp	.-4      	; 0x7e5c <eeprom_write_r18>
    7e60:	1f ba       	out	0x1f, r1	; 31
    7e62:	92 bd       	out	0x22, r25	; 34
    7e64:	81 bd       	out	0x21, r24	; 33
    7e66:	20 bd       	out	0x20, r18	; 32
    7e68:	0f b6       	in	r0, 0x3f	; 63
    7e6a:	f8 94       	cli
    7e6c:	fa 9a       	sbi	0x1f, 2	; 31
    7e6e:	f9 9a       	sbi	0x1f, 1	; 31
    7e70:	0f be       	out	0x3f, r0	; 63
    7e72:	01 96       	adiw	r24, 0x01	; 1
    7e74:	08 95       	ret

00007e76 <_exit>:
    7e76:	f8 94       	cli

00007e78 <__stop_program>:
    7e78:	ff cf       	rjmp	.-2      	; 0x7e78 <__stop_program>
